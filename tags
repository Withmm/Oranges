!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/xiongzile/os/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(LIB)	Makefile	/^$(LIB) : $(LOBJS)$/;"	t
$(ORANGESKERNEL)	Makefile	/^$(ORANGESKERNEL) : $(OBJS) $(LIB)$/;"	t
ALT_L	include/sys/keyboard.h	/^#define ALT_L	/;"	d
ALT_R	include/sys/keyboard.h	/^#define ALT_R	/;"	d
ANY	include/sys/const.h	/^#define ANY	/;"	d
APPS	include/sys/keyboard.h	/^#define APPS	/;"	d
ARDStruct	boot/hdldr.asm	/^ARDStruct		equ	LOADER_PHY_ADDR + _ARDStruct$/;"	d
ARDStruct	boot/loader.asm	/^ARDStruct		equ	LOADER_PHY_ADDR + _ARDStruct$/;"	d
ARFLAGS	Makefile	/^ARFLAGS		= rcs$/;"	m
ARG_NR_MAX	command/cat.c	/^#define ARG_NR_MAX /;"	d	file:
ARG_NR_MAX	command/echo.c	/^#define ARG_NR_MAX /;"	d	file:
ARG_NR_MAX	command/edit.c	/^#define ARG_NR_MAX /;"	d	file:
ARG_NR_MAX	command/kill.c	/^#define ARG_NR_MAX /;"	d	file:
ARG_NR_MAX	command/rm.c	/^#define ARG_NR_MAX /;"	d	file:
ARG_NR_MAX	command/stat.c	/^#define ARG_NR_MAX /;"	d	file:
ARG_NR_MAX	command/touch.c	/^#define ARG_NR_MAX /;"	d	file:
ASM	Makefile	/^ASM		= nasm$/;"	m
ASM	command/Makefile	/^ASM		= nasm$/;"	m
ASMBFLAGS	Makefile	/^ASMBFLAGS	= -I boot\/include\/$/;"	m
ASMFLAGS	command/Makefile	/^ASMFLAGS	= -I ..\/include\/ -f elf$/;"	m
ASMKFLAGS	Makefile	/^ASMKFLAGS	= -I include\/ -I include\/sys\/ -f elf$/;"	m
ASSERT	include/stdio.h	/^#define ASSERT$/;"	d
ATA_IDENTIFY	include/sys/hd.h	/^#define ATA_IDENTIFY	/;"	d
ATA_READ	include/sys/hd.h	/^#define ATA_READ	/;"	d
ATA_WRITE	include/sys/hd.h	/^#define ATA_WRITE	/;"	d
AT_WINI_IRQ	include/sys/const.h	/^#define	AT_WINI_IRQ	/;"	d
BACKSPACE	include/sys/keyboard.h	/^#define BACKSPACE	/;"	d
BCD_TO_DEC	include/stdio.h	/^#define  BCD_TO_DEC(/;"	d
BIN	command/Makefile	/^BIN		= echo pwd cat touch rm stat ls ps kill edit$/;"	m
BI_KERNEL_FILE	include/sys/config.h	/^#define	BI_KERNEL_FILE	/;"	d
BI_MAG	include/sys/config.h	/^#define	BI_MAG	/;"	d
BI_MEM_SIZE	include/sys/config.h	/^#define	BI_MEM_SIZE	/;"	d
BLACK	include/sys/const.h	/^#define BLACK /;"	d
BLOCKED	include/sys/const.h	/^#define BLOCKED /;"	d
BLUE	include/sys/const.h	/^#define BLUE /;"	d
BOOT_PARAM_ADDR	include/sys/config.h	/^#define	BOOT_PARAM_ADDR	/;"	d
BOOT_PARAM_MAGIC	include/sys/config.h	/^#define	BOOT_PARAM_MAGIC	/;"	d
BOTH	include/sys/const.h	/^#define BOTH	/;"	d
BRIGHT	include/sys/const.h	/^#define BRIGHT /;"	d
BUF	include/sys/const.h	/^#define	BUF	/;"	d
BUF_LEN	include/sys/const.h	/^#define	BUF_LEN	/;"	d
BaseOfStack	boot/boot.asm	/^BaseOfStack		equ	0100h	; 调试状态下堆栈基地址(栈底, 从这个位置向低地址生长/;"	d
BaseOfStack	boot/boot.asm	/^BaseOfStack		equ	07c00h	; Boot状态下堆栈基地址(栈底, 从这个位置向低地址生长/;"	d
BaseOfStack	boot/hdldr.asm	/^BaseOfStack	equ	0100h$/;"	d
BaseOfStack	boot/loader.asm	/^BaseOfStack	equ	0100h$/;"	d
Begin	boot/hdldr.asm	/^.Begin:$/;"	l
Begin	boot/loader.asm	/^.Begin:$/;"	l
BootMessage	boot/boot.asm	/^BootMessage:		db	"Booting  "; 9字节, 不够则用空格补齐. 序号 0$/;"	d
BootMessage	boot/hdboot.asm	/^BootMessage:		db	"Booting  "; 9字节, 不够则用空格补齐. 序号 0$/;"	d
CAPS_LOCK	include/sys/keyboard.h	/^#define CAPS_LOCK	/;"	d
CASCADE_IRQ	include/sys/const.h	/^#define	CASCADE_IRQ	/;"	d
CC	Makefile	/^CC		= gcc$/;"	m
CC	command/Makefile	/^CC		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		= -I include\/ -I include\/sys\/ -c -fno-builtin -Wall -fno-stack-protector -m32$/;"	m
CFLAGS	command/Makefile	/^CFLAGS		= -I ..\/include\/ -c -fno-builtin -fno-stack-protector -Wall -m32$/;"	m
CLK_ELE	include/sys/const.h	/^#define CLK_ELE	/;"	d
CLK_HEALTH	include/sys/const.h	/^#define  CLK_HEALTH /;"	d
CLK_IO	include/sys/const.h	/^#define CLK_IO	/;"	d
CLK_STATUS	include/sys/const.h	/^#define  CLK_STATUS /;"	d
CLOCK_IRQ	include/sys/const.h	/^#define	CLOCK_IRQ	/;"	d
CLOSE	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK, LS,$/;"	e	enum:msgtype
CNT	include/sys/const.h	/^#define	CNT	/;"	d
CONSOLE	include/sys/console.h	/^}CONSOLE;$/;"	t	typeref:struct:s_console
CRTC_ADDR_REG	include/sys/const.h	/^#define	CRTC_ADDR_REG	/;"	d
CRTC_DATA_REG	include/sys/const.h	/^#define	CRTC_DATA_REG	/;"	d
CTRL_L	include/sys/keyboard.h	/^#define CTRL_L	/;"	d
CTRL_R	include/sys/keyboard.h	/^#define CTRL_R	/;"	d
CURSOR_H	include/sys/const.h	/^#define	CURSOR_H	/;"	d
CURSOR_L	include/sys/const.h	/^#define	CURSOR_L	/;"	d
DASM	Makefile	/^DASM		= objdump$/;"	m
DASM	command/Makefile	/^DASM		= objdump$/;"	m
DASMFLAGS	Makefile	/^DASMFLAGS	= -D$/;"	m
DASMFLAGS	command/Makefile	/^DASMFLAGS	= -D$/;"	m
DASMOUTPUT	Makefile	/^DASMOUTPUT	= kernel.bin.asm$/;"	m
DAY	include/sys/const.h	/^#define  DAY /;"	d
DA_32	include/sys/protect.h	/^#define	DA_32	/;"	d
DA_386CGate	include/sys/protect.h	/^#define	DA_386CGate	/;"	d
DA_386IGate	include/sys/protect.h	/^#define	DA_386IGate	/;"	d
DA_386TGate	include/sys/protect.h	/^#define	DA_386TGate	/;"	d
DA_386TSS	include/sys/protect.h	/^#define	DA_386TSS	/;"	d
DA_C	include/sys/protect.h	/^#define	DA_C	/;"	d
DA_CCO	include/sys/protect.h	/^#define	DA_CCO	/;"	d
DA_CCOR	include/sys/protect.h	/^#define	DA_CCOR	/;"	d
DA_CR	include/sys/protect.h	/^#define	DA_CR	/;"	d
DA_DPL0	include/sys/protect.h	/^#define	DA_DPL0	/;"	d
DA_DPL1	include/sys/protect.h	/^#define	DA_DPL1	/;"	d
DA_DPL2	include/sys/protect.h	/^#define	DA_DPL2	/;"	d
DA_DPL3	include/sys/protect.h	/^#define	DA_DPL3	/;"	d
DA_DR	include/sys/protect.h	/^#define	DA_DR	/;"	d
DA_DRW	include/sys/protect.h	/^#define	DA_DRW	/;"	d
DA_DRWA	include/sys/protect.h	/^#define	DA_DRWA	/;"	d
DA_LDT	include/sys/protect.h	/^#define	DA_LDT	/;"	d
DA_LIMIT_4K	include/sys/protect.h	/^#define	DA_LIMIT_4K	/;"	d
DA_TaskGate	include/sys/protect.h	/^#define	DA_TaskGate	/;"	d
DEFAULT_CHAR_COLOR	include/sys/console.h	/^#define DEFAULT_CHAR_COLOR	/;"	d
DELETE	include/sys/keyboard.h	/^#define DELETE	/;"	d
DEVICE	include/sys/const.h	/^#define	DEVICE	/;"	d
DEV_CDROM	include/sys/const.h	/^#define	DEV_CDROM	/;"	d
DEV_CHAR_TTY	include/sys/const.h	/^#define	DEV_CHAR_TTY	/;"	d
DEV_CLOSE	include/sys/const.h	/^	DEV_CLOSE,$/;"	e	enum:msgtype
DEV_FLOPPY	include/sys/const.h	/^#define	DEV_FLOPPY	/;"	d
DEV_HD	include/sys/const.h	/^#define	DEV_HD	/;"	d
DEV_IOCTL	include/sys/const.h	/^	DEV_IOCTL$/;"	e	enum:msgtype
DEV_OPEN	include/sys/const.h	/^	DEV_OPEN = 1001,$/;"	e	enum:msgtype
DEV_READ	include/sys/const.h	/^	DEV_READ,$/;"	e	enum:msgtype
DEV_SCSI	include/sys/const.h	/^#define	DEV_SCSI	/;"	d
DEV_WRITE	include/sys/const.h	/^	DEV_WRITE,$/;"	e	enum:msgtype
DIOCTL_GET_GEO	include/sys/const.h	/^#define	DIOCTL_GET_GEO	/;"	d
DIR_ENTRY_SIZE	include/sys/fs.h	/^#define	DIR_ENTRY_SIZE	/;"	d
DISKLOG_RD_SECT	fs/disklog.c	/^#define DISKLOG_RD_SECT(/;"	d	file:
DISKLOG_WR_SECT	fs/disklog.c	/^#define DISKLOG_WR_SECT(/;"	d	file:
DOWN	include/sys/keyboard.h	/^#define DOWN	/;"	d
DRV_OF_DEV	kernel/hd.c	/^#define DRV_OF_DEV(/;"	d	file:
DispAL	boot/hdldr.asm	/^DispAL:$/;"	l
DispAL	boot/loader.asm	/^DispAL:$/;"	l
DispInt	boot/hdldr.asm	/^DispInt:$/;"	l
DispInt	boot/loader.asm	/^DispInt:$/;"	l
DispMemInfo	boot/hdldr.asm	/^DispMemInfo:$/;"	l
DispMemInfo	boot/loader.asm	/^DispMemInfo:$/;"	l
DispReturn	boot/hdldr.asm	/^DispReturn:$/;"	l
DispReturn	boot/loader.asm	/^DispReturn:$/;"	l
DispStr	boot/boot.asm	/^DispStr:$/;"	l
DispStr	boot/hdldr.asm	/^DispStr:$/;"	l
DispStr	boot/loader.asm	/^DispStr:$/;"	l
DispStrRealMode	boot/loader.asm	/^DispStrRealMode:$/;"	l
EDIT_BUF_SIZE	command/edit.c	/^#define EDIT_BUF_SIZE /;"	d	file:
ELF_MAGIC_LEN	command/edit.c	/^#define ELF_MAGIC_LEN /;"	d	file:
ENABLE_DISK_LOG	include/sys/config.h	/^#define ENABLE_DISK_LOG$/;"	d
END	include/sys/keyboard.h	/^#define END	/;"	d
ENTER	include/sys/keyboard.h	/^#define ENTER	/;"	d
ENTRYPOINT	Makefile	/^ENTRYPOINT	= 0x1000$/;"	m
ESC	include/sys/keyboard.h	/^#define ESC	/;"	d
ETHER_IRQ	include/sys/const.h	/^#define	ETHER_IRQ	/;"	d
EXEC	include/sys/const.h	/^	EXEC, WAIT, PS, KILL, $/;"	e	enum:msgtype
EXIT	include/sys/const.h	/^	FORK, EXIT,$/;"	e	enum:msgtype
EXTERN	include/stdio.h	/^#define	EXTERN	/;"	d
EXTERN	include/sys/global.h	/^#define	EXTERN$/;"	d
EXT_PART	include/sys/const.h	/^#define EXT_PART	/;"	d
F1	include/sys/keyboard.h	/^#define F1	/;"	d
F10	include/sys/keyboard.h	/^#define F10	/;"	d
F11	include/sys/keyboard.h	/^#define F11	/;"	d
F12	include/sys/keyboard.h	/^#define F12	/;"	d
F2	include/sys/keyboard.h	/^#define F2	/;"	d
F3	include/sys/keyboard.h	/^#define F3	/;"	d
F4	include/sys/keyboard.h	/^#define F4	/;"	d
F5	include/sys/keyboard.h	/^#define F5	/;"	d
F6	include/sys/keyboard.h	/^#define F6	/;"	d
F7	include/sys/keyboard.h	/^#define F7	/;"	d
F8	include/sys/keyboard.h	/^#define F8	/;"	d
F9	include/sys/keyboard.h	/^#define F9	/;"	d
FD	Makefile	/^FD		= a.img$/;"	m
FD	include/sys/const.h	/^#define	FD	/;"	d
FIRST_PROC	include/sys/proc.h	/^#define FIRST_PROC	/;"	d
FLAGS	include/sys/const.h	/^#define	FLAGS	/;"	d
FLAG_ALT_L	include/sys/keyboard.h	/^#define FLAG_ALT_L	/;"	d
FLAG_ALT_R	include/sys/keyboard.h	/^#define FLAG_ALT_R	/;"	d
FLAG_BREAK	include/sys/keyboard.h	/^#define FLAG_BREAK	/;"	d
FLAG_CTRL_L	include/sys/keyboard.h	/^#define FLAG_CTRL_L	/;"	d
FLAG_CTRL_R	include/sys/keyboard.h	/^#define FLAG_CTRL_R	/;"	d
FLAG_EXT	include/sys/keyboard.h	/^#define FLAG_EXT	/;"	d
FLAG_PAD	include/sys/keyboard.h	/^#define FLAG_PAD	/;"	d
FLAG_SHIFT_L	include/sys/keyboard.h	/^#define FLAG_SHIFT_L	/;"	d
FLAG_SHIFT_R	include/sys/keyboard.h	/^#define FLAG_SHIFT_R	/;"	d
FLASH	include/sys/const.h	/^#define FLASH /;"	d
FLOPPY_IRQ	include/sys/const.h	/^#define	FLOPPY_IRQ	/;"	d
FORK	include/sys/const.h	/^	FORK, EXIT,$/;"	e	enum:msgtype
FREE_SLOT	include/sys/const.h	/^#define FREE_SLOT /;"	d
FSBUF_SIZE	kernel/global.c	/^PUBLIC const int FSBUF_SIZE = 0x100000;$/;"	v	typeref:typename:PUBLIC const int
GDT_SIZE	include/sys/const.h	/^#define	GDT_SIZE	/;"	d
GET_PID	include/sys/const.h	/^	GET_TICKS, GET_PID, GET_RTC_TIME,$/;"	e	enum:msgtype
GET_RTC_TIME	include/sys/const.h	/^	GET_TICKS, GET_PID, GET_RTC_TIME,$/;"	e	enum:msgtype
GET_TICKS	include/sys/const.h	/^	GET_TICKS, GET_PID, GET_RTC_TIME,$/;"	e	enum:msgtype
GLOBAL_VARIABLES_HERE	kernel/global.c	/^#define GLOBAL_VARIABLES_HERE$/;"	d	file:
GRAY_CHAR	include/sys/console.h	/^#define GRAY_CHAR	/;"	d
GREEN	include/sys/const.h	/^#define GREEN /;"	d
GUI_L	include/sys/keyboard.h	/^#define GUI_L	/;"	d
GUI_R	include/sys/keyboard.h	/^#define GUI_R	/;"	d
GdtLen	boot/hdldr.asm	/^GdtLen		equ	$ - LABEL_GDT$/;"	d
GdtLen	boot/loader.asm	/^GdtLen		equ	$ - LABEL_GDT$/;"	d
GdtPtr	boot/hdldr.asm	/^GdtPtr		dw	GdtLen - 1				; 段界限$/;"	d
GdtPtr	boot/loader.asm	/^GdtPtr		dw	GdtLen - 1				; 段界限$/;"	d
GetFATEntry	boot/boot.asm	/^GetFATEntry:$/;"	l
GetFATEntry	boot/loader.asm	/^GetFATEntry:$/;"	l
GoOnReading	boot/boot.asm	/^.GoOnReading:$/;"	l
GoOnReading	boot/loader.asm	/^.GoOnReading:$/;"	l
HANGING	include/sys/const.h	/^#define HANGING /;"	d
HARD_INT	include/sys/const.h	/^	HARD_INT = 1,$/;"	e	enum:msgtype
HD	Makefile	/^HD		= 100m.img$/;"	m
HD	command/Makefile	/^HD		= ..\/100m.img$/;"	m
HD_TIMEOUT	include/sys/hd.h	/^#define	HD_TIMEOUT	/;"	d
HOME	include/sys/keyboard.h	/^#define HOME	/;"	d
HOUR	include/sys/const.h	/^#define  HOUR /;"	d
HZ	include/sys/const.h	/^#define HZ /;"	d
IDT_SIZE	include/sys/const.h	/^#define	IDT_SIZE	/;"	d
INDEX_DUMMY	include/sys/protect.h	/^#define	INDEX_DUMMY	/;"	d
INDEX_FLAT_C	include/sys/protect.h	/^#define	INDEX_FLAT_C	/;"	d
INDEX_FLAT_RW	include/sys/protect.h	/^#define	INDEX_FLAT_RW	/;"	d
INDEX_LDT_C	include/sys/protect.h	/^#define INDEX_LDT_C /;"	d
INDEX_LDT_FIRST	include/sys/protect.h	/^#define	INDEX_LDT_FIRST	/;"	d
INDEX_LDT_RW	include/sys/protect.h	/^#define INDEX_LDT_RW /;"	d
INDEX_TSS	include/sys/protect.h	/^#define	INDEX_TSS	/;"	d
INDEX_VIDEO	include/sys/protect.h	/^#define	INDEX_VIDEO	/;"	d
INIT	include/sys/const.h	/^#define INIT	/;"	d
INODE_SIZE	include/sys/fs.h	/^#define	INODE_SIZE	/;"	d
INSERT	include/sys/keyboard.h	/^#define INSERT	/;"	d
INSTALL_NR_SECTS	include/sys/config.h	/^#define	INSTALL_NR_SECTS	/;"	d
INSTALL_START_SECT	include/sys/config.h	/^#define	INSTALL_START_SECT	/;"	d
INTERRUPT	include/sys/const.h	/^#define INTERRUPT	/;"	d
INT_M_CTL	include/sys/const.h	/^#define	INT_M_CTL	/;"	d
INT_M_CTLMASK	include/sys/const.h	/^#define	INT_M_CTLMASK	/;"	d
INT_S_CTL	include/sys/const.h	/^#define	INT_S_CTL	/;"	d
INT_S_CTLMASK	include/sys/const.h	/^#define	INT_S_CTLMASK	/;"	d
INT_VECTOR_BOUNDS	include/sys/protect.h	/^#define	INT_VECTOR_BOUNDS	/;"	d
INT_VECTOR_BREAKPOINT	include/sys/protect.h	/^#define	INT_VECTOR_BREAKPOINT	/;"	d
INT_VECTOR_COPROC_ERR	include/sys/protect.h	/^#define	INT_VECTOR_COPROC_ERR	/;"	d
INT_VECTOR_COPROC_NOT	include/sys/protect.h	/^#define	INT_VECTOR_COPROC_NOT	/;"	d
INT_VECTOR_COPROC_SEG	include/sys/protect.h	/^#define	INT_VECTOR_COPROC_SEG	/;"	d
INT_VECTOR_DEBUG	include/sys/protect.h	/^#define	INT_VECTOR_DEBUG	/;"	d
INT_VECTOR_DIVIDE	include/sys/protect.h	/^#define	INT_VECTOR_DIVIDE	/;"	d
INT_VECTOR_DOUBLE_FAULT	include/sys/protect.h	/^#define	INT_VECTOR_DOUBLE_FAULT	/;"	d
INT_VECTOR_INVAL_OP	include/sys/protect.h	/^#define	INT_VECTOR_INVAL_OP	/;"	d
INT_VECTOR_INVAL_TSS	include/sys/protect.h	/^#define	INT_VECTOR_INVAL_TSS	/;"	d
INT_VECTOR_IRQ0	include/sys/protect.h	/^#define	INT_VECTOR_IRQ0	/;"	d
INT_VECTOR_IRQ8	include/sys/protect.h	/^#define	INT_VECTOR_IRQ8	/;"	d
INT_VECTOR_NMI	include/sys/protect.h	/^#define	INT_VECTOR_NMI	/;"	d
INT_VECTOR_OVERFLOW	include/sys/protect.h	/^#define	INT_VECTOR_OVERFLOW	/;"	d
INT_VECTOR_PAGE_FAULT	include/sys/protect.h	/^#define	INT_VECTOR_PAGE_FAULT	/;"	d
INT_VECTOR_PROTECTION	include/sys/protect.h	/^#define	INT_VECTOR_PROTECTION	/;"	d
INT_VECTOR_SEG_NOT	include/sys/protect.h	/^#define	INT_VECTOR_SEG_NOT	/;"	d
INT_VECTOR_STACK_FAULT	include/sys/protect.h	/^#define	INT_VECTOR_STACK_FAULT	/;"	d
INT_VECTOR_SYS_CALL	include/sys/protect.h	/^#define INT_VECTOR_SYS_CALL /;"	d
INT_VECTOR_SYS_CALL	lib/syscall.asm	/^INT_VECTOR_SYS_CALL equ 0x90$/;"	d
INVALID_DRIVER	include/sys/const.h	/^#define INVALID_DRIVER	/;"	d
INVALID_INODE	include/sys/const.h	/^#define	INVALID_INODE	/;"	d
I_BLOCK_SPECIAL	include/sys/const.h	/^#define I_BLOCK_SPECIAL /;"	d
I_CHAR_SPECIAL	include/sys/const.h	/^#define I_CHAR_SPECIAL /;"	d
I_DIRECTORY	include/sys/const.h	/^#define I_DIRECTORY /;"	d
I_NAMED_PIPE	include/sys/const.h	/^#define I_NAMED_PIPE	/;"	d
I_REGULAR	include/sys/const.h	/^#define I_REGULAR /;"	d
I_TYPE_MASK	include/sys/const.h	/^#define I_TYPE_MASK /;"	d
Init	kernel/main.c	/^void Init()$/;"	f	typeref:typename:void
InitKernel	boot/hdldr.asm	/^InitKernel:	; 遍历每一个 Program Header，根据 Program Header 中的信息来确定把什/;"	l
InitKernel	boot/loader.asm	/^InitKernel:	; 遍历每一个 Program Header，根据 Program Header 中的信息来确定把什/;"	l
KB_ACK	include/sys/const.h	/^#define KB_ACK	/;"	d
KB_CMD	include/sys/const.h	/^#define KB_CMD	/;"	d
KB_DATA	include/sys/const.h	/^#define KB_DATA	/;"	d
KB_IN_BYTES	include/sys/keyboard.h	/^#define	KB_IN_BYTES	/;"	d
KEYBOARD_IRQ	include/sys/const.h	/^#define	KEYBOARD_IRQ	/;"	d
KILL	include/sys/const.h	/^	EXEC, WAIT, PS, KILL, $/;"	e	enum:msgtype
KernelFileName	boot/hdldr.asm	/^KernelFileName		db	"kernel.bin", 0	; KERNEL.BIN 之文件名$/;"	d
KernelFileName	boot/loader.asm	/^KernelFileName		db	"KERNEL  BIN", 0	; KERNEL.BIN 之文件名$/;"	d
KillMotor	boot/loader.asm	/^KillMotor:$/;"	l
LABEL_CMP_FILENAME	boot/boot.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_CMP_FILENAME	boot/loader.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_DATA	boot/hdldr.asm	/^LABEL_DATA:$/;"	l
LABEL_DATA	boot/loader.asm	/^LABEL_DATA:$/;"	l
LABEL_DESC_FLAT_C	boot/hdldr.asm	/^LABEL_DESC_FLAT_C:		Descriptor             0,              0fffffh, DA_CR  | DA_32 | DA_LIMIT_4K/;"	l
LABEL_DESC_FLAT_C	boot/loader.asm	/^LABEL_DESC_FLAT_C:		Descriptor             0,              0fffffh, DA_CR  | DA_32 | DA_LIMIT_4K/;"	l
LABEL_DESC_FLAT_RW	boot/hdldr.asm	/^LABEL_DESC_FLAT_RW:		Descriptor             0,              0fffffh, DA_DRW | DA_32 | DA_LIMIT_4/;"	l
LABEL_DESC_FLAT_RW	boot/loader.asm	/^LABEL_DESC_FLAT_RW:		Descriptor             0,              0fffffh, DA_DRW | DA_32 | DA_LIMIT_4/;"	l
LABEL_DESC_VIDEO	boot/hdldr.asm	/^LABEL_DESC_VIDEO:		Descriptor	 0B8000h,               0ffffh, DA_DRW                         | D/;"	l
LABEL_DESC_VIDEO	boot/loader.asm	/^LABEL_DESC_VIDEO:		Descriptor	 0B8000h,               0ffffh, DA_DRW                         | D/;"	l
LABEL_DIFFERENT	boot/boot.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_DIFFERENT	boot/loader.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_EVEN_2	boot/boot.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_EVEN_2	boot/loader.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_FILENAME_FOUND	boot/boot.asm	/^LABEL_FILENAME_FOUND:			; 找到 LOADER.BIN 后便来到这里继续$/;"	l
LABEL_FILENAME_FOUND	boot/loader.asm	/^LABEL_FILENAME_FOUND:			; 找到 KERNEL.BIN 后便来到这里继续$/;"	l
LABEL_FILE_LOADED	boot/boot.asm	/^LABEL_FILE_LOADED:$/;"	l
LABEL_FILE_LOADED	boot/loader.asm	/^LABEL_FILE_LOADED:$/;"	l
LABEL_GDT	boot/hdldr.asm	/^LABEL_GDT:			Descriptor             0,                    0, 0						; 空描述符$/;"	l
LABEL_GDT	boot/loader.asm	/^LABEL_GDT:			Descriptor             0,                    0, 0						; 空描述符$/;"	l
LABEL_GET_FAT_ENRY_OK	boot/boot.asm	/^LABEL_GET_FAT_ENRY_OK:$/;"	l
LABEL_GET_FAT_ENRY_OK	boot/loader.asm	/^LABEL_GET_FAT_ENRY_OK:$/;"	l
LABEL_GOON_LOADING_FILE	boot/boot.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOON_LOADING_FILE	boot/loader.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/boot.asm	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/loader.asm	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GO_ON	boot/boot.asm	/^LABEL_GO_ON:$/;"	l
LABEL_GO_ON	boot/loader.asm	/^LABEL_GO_ON:$/;"	l
LABEL_NO_KERNELBIN	boot/loader.asm	/^LABEL_NO_KERNELBIN:$/;"	l
LABEL_NO_LOADERBIN	boot/boot.asm	/^LABEL_NO_LOADERBIN:$/;"	l
LABEL_PM_START	boot/hdldr.asm	/^LABEL_PM_START:$/;"	l
LABEL_PM_START	boot/loader.asm	/^LABEL_PM_START:$/;"	l
LABEL_SEARCH_FOR_KERNELBIN	boot/loader.asm	/^LABEL_SEARCH_FOR_KERNELBIN:$/;"	l
LABEL_SEARCH_FOR_LOADERBIN	boot/boot.asm	/^LABEL_SEARCH_FOR_LOADERBIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/boot.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/loader.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_START	boot/boot.asm	/^LABEL_START:	$/;"	l
LABEL_START	boot/hdldr.asm	/^LABEL_START:			; <--- 从这里开始 *************$/;"	l
LABEL_START	boot/loader.asm	/^LABEL_START:			; <--- 从这里开始 *************$/;"	l
LAST_PROC	include/sys/proc.h	/^#define LAST_PROC	/;"	d
LD	Makefile	/^LD		= ld$/;"	m
LD	command/Makefile	/^LD		= ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS		= -Ttext $(ENTRYPOINT) -Map krnl.map -m elf_i386$/;"	m
LDFLAGS	command/Makefile	/^LDFLAGS		= -Ttext 0x1000 -m elf_i386$/;"	m
LDT_SIZE	include/sys/protect.h	/^#define LDT_SIZE	/;"	d
LED_CODE	include/sys/const.h	/^#define LED_CODE	/;"	d
LEFT	include/sys/keyboard.h	/^#define LEFT	/;"	d
LIB	Makefile	/^LIB		= lib\/orangescrt.a$/;"	m
LIB	command/Makefile	/^LIB		= ..\/lib\/orangescrt.a$/;"	m
LIMIT_4K_SHIFT	include/sys/protect.h	/^#define	LIMIT_4K_SHIFT	/;"	d
LOBJS	Makefile	/^LOBJS		=  lib\/syscall.o\\$/;"	m
LOGBUF_SIZE	kernel/global.c	/^PUBLIC const int LOGBUF_SIZE = 0x100000;$/;"	v	typeref:typename:PUBLIC const int
LOGDISKBUF_SIZE	kernel/global.c	/^PUBLIC const int LOGDISKBUF_SIZE = 0x100000;$/;"	v	typeref:typename:PUBLIC const int
LOG_ARROW_FD_INODE	fs/disklog.c	/^#define LOG_ARROW_FD_INODE /;"	d	file:
LOG_ARROW_INODE_INODEARRAY	fs/disklog.c	/^#define LOG_ARROW_INODE_INODEARRAY /;"	d	file:
LOG_ARROW_PARENT_CHILD	fs/disklog.c	/^#define LOG_ARROW_PARENT_CHILD /;"	d	file:
LOG_ARROW_PROC_FD	fs/disklog.c	/^#define LOG_ARROW_PROC_FD /;"	d	file:
LOG_FD_TABLE	fs/disklog.c	/^#define LOG_FD_TABLE /;"	d	file:
LOG_IMAP	fs/disklog.c	/^#define LOG_IMAP /;"	d	file:
LOG_INODE_ARRAY	fs/disklog.c	/^#define LOG_INODE_ARRAY /;"	d	file:
LOG_INODE_TABLE	fs/disklog.c	/^#define LOG_INODE_TABLE /;"	d	file:
LOG_MSG_SRC2DST	fs/disklog.c	/^#define LOG_MSG_SRC2DST /;"	d	file:
LOG_PROCS	fs/disklog.c	/^#define LOG_PROCS /;"	d	file:
LOG_ROOT_DIR	fs/disklog.c	/^#define LOG_ROOT_DIR /;"	d	file:
LOG_SMAP	fs/disklog.c	/^#define LOG_SMAP /;"	d	file:
LS	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK, LS,$/;"	e	enum:msgtype
LSEEK	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK, LS,$/;"	e	enum:msgtype
LS_MAX	command/ls.c	/^#define LS_MAX /;"	d	file:
LoadMessage	boot/hdldr.asm	/^LoadMessage:		db	"Loading  "$/;"	d
LoadMessage	boot/loader.asm	/^LoadMessage:		db	"Loading  "$/;"	d
LoaderFileName	boot/boot.asm	/^LoaderFileName		db	"LOADER  BIN", 0	; LOADER.BIN 之文件名$/;"	d
LoaderFileName	boot/hdboot.asm	/^LoaderFileName		db	"hdldr.bin", 0	; LOADER 之文件名$/;"	d
MAGIC_V1	include/sys/fs.h	/^#define	MAGIC_V1	/;"	d
MAG_CH_ASSERT	include/sys/const.h	/^#define MAG_CH_ASSERT	/;"	d
MAG_CH_PANIC	include/sys/const.h	/^#define MAG_CH_PANIC	/;"	d
MAJOR	include/sys/const.h	/^#define	MAJOR(/;"	d
MAJOR_SHIFT	include/sys/const.h	/^#define	MAJOR_SHIFT	/;"	d
MAKE_COLOR	include/sys/const.h	/^#define	MAKE_COLOR(/;"	d
MAKE_DEV	include/sys/const.h	/^#define	MAKE_DEV(/;"	d
MAKE_DEVICE_REG	include/sys/hd.h	/^#define	MAKE_DEVICE_REG(/;"	d
MAP_COLS	include/sys/keyboard.h	/^#define MAP_COLS	/;"	d
MASK_RAW	include/sys/keyboard.h	/^#define MASK_RAW	/;"	d
MAX_DRIVES	include/sys/const.h	/^#define	MAX_DRIVES	/;"	d
MAX_FILENAME_LEN	include/sys/fs.h	/^#define	MAX_FILENAME_LEN	/;"	d
MAX_IO_BYTES	include/sys/hd.h	/^#define MAX_IO_BYTES	/;"	d
MAX_PATH	include/stdio.h	/^#define	MAX_PATH	/;"	d
MAX_PRIM	include/sys/const.h	/^#define	MAX_PRIM	/;"	d
MAX_SUBPARTITIONS	include/sys/const.h	/^#define	MAX_SUBPARTITIONS	/;"	d
MAX_TICKS	include/sys/const.h	/^#define	MAX_TICKS	/;"	d
MEMSET_LOG_SECTS	include/sys/config.h	/^#define MEMSET_LOG_SECTS$/;"	d
MESSAGE	include/type.h	/^} MESSAGE;$/;"	t	typeref:struct:__anon6e8aff300108
MINOR	include/sys/const.h	/^#define	MINOR(/;"	d
MINOR_BOOT	include/sys/config.h	/^#define	MINOR_BOOT	/;"	d
MINOR_hd1a	include/sys/const.h	/^#define	MINOR_hd1a	/;"	d
MINOR_hd2a	include/sys/const.h	/^#define	MINOR_hd2a	/;"	d
MINOR_hd2c	include/sys/const.h	/^#define	MINOR_hd2c	/;"	d
MINUTE	include/sys/const.h	/^#define  MINUTE /;"	d
MMBUF_SIZE	kernel/global.c	/^PUBLIC const int MMBUF_SIZE = 0x100000;$/;"	v	typeref:typename:PUBLIC const int
MONTH	include/sys/const.h	/^#define  MONTH /;"	d
MemChkBuf	boot/hdldr.asm	/^MemChkBuf		equ	LOADER_PHY_ADDR + _MemChkBuf$/;"	d
MemChkBuf	boot/loader.asm	/^MemChkBuf		equ	LOADER_PHY_ADDR + _MemChkBuf$/;"	d
MemChkFail	boot/hdldr.asm	/^.MemChkFail:$/;"	l
MemChkFail	boot/loader.asm	/^.MemChkFail:$/;"	l
MemChkLoop	boot/hdldr.asm	/^.MemChkLoop:$/;"	l
MemChkLoop	boot/loader.asm	/^.MemChkLoop:$/;"	l
MemChkOK	boot/hdldr.asm	/^.MemChkOK:$/;"	l
MemChkOK	boot/loader.asm	/^.MemChkOK:$/;"	l
MemCpy	boot/hdldr.asm	/^MemCpy:$/;"	l
MemCpy	boot/loader.asm	/^MemCpy:$/;"	l
Message1	boot/boot.asm	/^Message1		db	"Ready.   "; 9字节, 不够则用空格补齐. 序号 1$/;"	d
Message1	boot/hdboot.asm	/^Message1		db	"HD Boot  "; 9字节, 不够则用空格补齐. 序号 1$/;"	d
Message1	boot/hdldr.asm	/^Message1		db	"         "$/;"	d
Message1	boot/loader.asm	/^Message1		db	"         "$/;"	d
Message2	boot/boot.asm	/^Message2		db	"No LOADER"; 9字节, 不够则用空格补齐. 序号 2$/;"	d
Message2	boot/hdboot.asm	/^Message2		db	"No LOADER"; 9字节, 不够则用空格补齐. 序号 2$/;"	d
Message2	boot/hdldr.asm	/^Message2		db	"in HD LDR"$/;"	d
Message2	boot/loader.asm	/^Message2		db	"Ready.   "$/;"	d
Message3	boot/hdboot.asm	/^Message3		db	"Error 0  "; 9字节, 不够则用空格补齐. 序号 3$/;"	d
Message3	boot/hdldr.asm	/^Message3		db	"No KERNEL"$/;"	d
Message3	boot/loader.asm	/^Message3		db	"No KERNEL"$/;"	d
Message4	boot/hdldr.asm	/^Message4		db	"Too Large"$/;"	d
Message4	boot/loader.asm	/^Message4		db	"Too Large"$/;"	d
Message5	boot/hdldr.asm	/^Message5		db	"Error 0  "$/;"	d
MessageLength	boot/boot.asm	/^MessageLength		equ	9$/;"	d
MessageLength	boot/hdboot.asm	/^MessageLength		equ	9$/;"	d
MessageLength	boot/hdldr.asm	/^MessageLength		equ	9$/;"	d
MessageLength	boot/loader.asm	/^MessageLength		equ	9$/;"	d
NAME_LEN	include/sys/const.h	/^#define	NAME_LEN	/;"	d
NO_DEV	include/sys/const.h	/^#define	NO_DEV	/;"	d
NO_PART	include/sys/const.h	/^#define NO_PART	/;"	d
NO_TASK	include/sys/const.h	/^#define NO_TASK	/;"	d
NR_CONSOLES	include/sys/const.h	/^#define NR_CONSOLES	/;"	d
NR_DEFAULT_FILE_SECTS	include/sys/const.h	/^#define	NR_DEFAULT_FILE_SECTS	/;"	d
NR_FILES	include/sys/const.h	/^#define	NR_FILES	/;"	d
NR_FILE_DESC	include/sys/const.h	/^#define	NR_FILE_DESC	/;"	d
NR_INODE	include/sys/const.h	/^#define	NR_INODE	/;"	d
NR_IRQ	include/sys/const.h	/^#define	NR_IRQ	/;"	d
NR_NATIVE_PROCS	include/sys/proc.h	/^#define NR_NATIVE_PROCS	/;"	d
NR_PART_PER_DRIVE	include/sys/const.h	/^#define	NR_PART_PER_DRIVE	/;"	d
NR_PRIM_PER_DRIVE	include/sys/const.h	/^#define	NR_PRIM_PER_DRIVE	/;"	d
NR_PROCS	include/sys/proc.h	/^#define NR_PROCS	/;"	d
NR_SCAN_CODES	include/sys/keyboard.h	/^#define NR_SCAN_CODES	/;"	d
NR_SECTS_FOR_LOG	include/sys/config.h	/^#define	NR_SECTS_FOR_LOG	/;"	d
NR_SUB_PER_DRIVE	include/sys/const.h	/^#define	NR_SUB_PER_DRIVE	/;"	d
NR_SUB_PER_PART	include/sys/const.h	/^#define	NR_SUB_PER_PART	/;"	d
NR_SUPER_BLOCK	include/sys/const.h	/^#define	NR_SUPER_BLOCK	/;"	d
NR_SYS_CALL	include/sys/const.h	/^#define NR_SYS_CALL	/;"	d
NR_TASKS	include/sys/proc.h	/^#define NR_TASKS	/;"	d
NUM_LOCK	include/sys/keyboard.h	/^#define	NUM_LOCK	/;"	d
NoAction	boot/hdldr.asm	/^.NoAction:$/;"	l
NoAction	boot/loader.asm	/^.NoAction:$/;"	l
OBJS	Makefile	/^OBJS		= kernel\/kernel.o kernel\/start.o kernel\/main.o\\$/;"	m
OFFSET	include/sys/const.h	/^#define	OFFSET	/;"	d
OPEN	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK, LS,$/;"	e	enum:msgtype
ORANGESBOOT	Makefile	/^ORANGESBOOT	= boot\/boot.bin boot\/hdboot.bin boot\/loader.bin boot\/hdldr.bin$/;"	m
ORANGESKERNEL	Makefile	/^ORANGESKERNEL	= kernel.bin$/;"	m
ORANGES_PART	include/sys/const.h	/^#define ORANGES_PART	/;"	d
O_CREAT	include/stdio.h	/^#define	O_CREAT	/;"	d
O_RDWR	include/stdio.h	/^#define	O_RDWR	/;"	d
O_TRUNC	include/stdio.h	/^#define	O_TRUNC	/;"	d
PAD_0	include/sys/keyboard.h	/^#define PAD_0	/;"	d
PAD_1	include/sys/keyboard.h	/^#define PAD_1	/;"	d
PAD_2	include/sys/keyboard.h	/^#define PAD_2	/;"	d
PAD_3	include/sys/keyboard.h	/^#define PAD_3	/;"	d
PAD_4	include/sys/keyboard.h	/^#define PAD_4	/;"	d
PAD_5	include/sys/keyboard.h	/^#define PAD_5	/;"	d
PAD_6	include/sys/keyboard.h	/^#define PAD_6	/;"	d
PAD_7	include/sys/keyboard.h	/^#define PAD_7	/;"	d
PAD_8	include/sys/keyboard.h	/^#define PAD_8	/;"	d
PAD_9	include/sys/keyboard.h	/^#define PAD_9	/;"	d
PAD_DEL	include/sys/keyboard.h	/^#define PAD_DEL	/;"	d
PAD_DOT	include/sys/keyboard.h	/^#define PAD_DOT	/;"	d
PAD_DOWN	include/sys/keyboard.h	/^#define PAD_DOWN	/;"	d
PAD_END	include/sys/keyboard.h	/^#define PAD_END	/;"	d
PAD_ENTER	include/sys/keyboard.h	/^#define PAD_ENTER	/;"	d
PAD_HOME	include/sys/keyboard.h	/^#define PAD_HOME	/;"	d
PAD_INS	include/sys/keyboard.h	/^#define PAD_INS	/;"	d
PAD_LEFT	include/sys/keyboard.h	/^#define PAD_LEFT	/;"	d
PAD_MID	include/sys/keyboard.h	/^#define PAD_MID	/;"	d
PAD_MINUS	include/sys/keyboard.h	/^#define PAD_MINUS	/;"	d
PAD_PAGEDOWN	include/sys/keyboard.h	/^#define PAD_PAGEDOWN	/;"	d
PAD_PAGEUP	include/sys/keyboard.h	/^#define PAD_PAGEUP	/;"	d
PAD_PLUS	include/sys/keyboard.h	/^#define PAD_PLUS	/;"	d
PAD_RIGHT	include/sys/keyboard.h	/^#define PAD_RIGHT	/;"	d
PAD_SLASH	include/sys/keyboard.h	/^#define PAD_SLASH	/;"	d
PAD_STAR	include/sys/keyboard.h	/^#define PAD_STAR	/;"	d
PAD_UP	include/sys/keyboard.h	/^#define PAD_UP	/;"	d
PAGEDOWN	include/sys/keyboard.h	/^#define PAGEDOWN	/;"	d
PAGEUP	include/sys/keyboard.h	/^#define PAGEUP	/;"	d
PARTITION_TABLE_OFFSET	include/sys/hd.h	/^#define	PARTITION_TABLE_OFFSET	/;"	d
PATHNAME	include/sys/const.h	/^#define	PATHNAME	/;"	d
PATH_NAME_LEN	command/cat.c	/^#define PATH_NAME_LEN /;"	d	file:
PATH_NAME_LEN	command/echo.c	/^#define PATH_NAME_LEN /;"	d	file:
PATH_NAME_LEN	command/edit.c	/^#define PATH_NAME_LEN /;"	d	file:
PATH_NAME_LEN	command/kill.c	/^#define PATH_NAME_LEN /;"	d	file:
PATH_NAME_LEN	command/rm.c	/^#define PATH_NAME_LEN /;"	d	file:
PATH_NAME_LEN	command/stat.c	/^#define PATH_NAME_LEN /;"	d	file:
PATH_NAME_LEN	command/touch.c	/^#define PATH_NAME_LEN /;"	d	file:
PAUSEBREAK	include/sys/keyboard.h	/^#define PAUSEBREAK	/;"	d
PID	include/sys/const.h	/^#define	PID	/;"	d
POSITION	include/sys/const.h	/^#define	POSITION	/;"	d
POWER	include/sys/keyboard.h	/^#define POWER	/;"	d
PRINTER_IRQ	include/sys/const.h	/^#define	PRINTER_IRQ	/;"	d
PRINTSCREEN	include/sys/keyboard.h	/^#define PRINTSCREEN	/;"	d
PRIVATE	include/type.h	/^#define	PRIVATE	/;"	d
PRIVILEGE_KRNL	include/sys/const.h	/^#define	PRIVILEGE_KRNL	/;"	d
PRIVILEGE_TASK	include/sys/const.h	/^#define	PRIVILEGE_TASK	/;"	d
PRIVILEGE_USER	include/sys/const.h	/^#define	PRIVILEGE_USER	/;"	d
PROCESS_NAME_LEN	command/ps.c	/^#define PROCESS_NAME_LEN /;"	d	file:
PROCS_BASE	include/sys/proc.h	/^#define	PROCS_BASE	/;"	d
PROC_IMAGE_SIZE_DEFAULT	include/sys/proc.h	/^#define	PROC_IMAGE_SIZE_DEFAULT	/;"	d
PROC_NR	include/sys/const.h	/^#define	PROC_NR	/;"	d
PROC_ORIGIN_STACK	include/sys/proc.h	/^#define	PROC_ORIGIN_STACK	/;"	d
PS	include/sys/const.h	/^	EXEC, WAIT, PS, KILL, $/;"	e	enum:msgtype
PUBLIC	include/type.h	/^#define	PUBLIC	/;"	d
P_EXTENDED	include/sys/const.h	/^#define	P_EXTENDED	/;"	d
P_PRIMARY	include/sys/const.h	/^#define	P_PRIMARY	/;"	d
RATE_GENERATOR	include/sys/const.h	/^#define RATE_GENERATOR /;"	d
RD_SECT	include/sys/fs.h	/^#define RD_SECT(/;"	d
READ	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK, LS,$/;"	e	enum:msgtype
READ_ONCE_LEN	command/edit.c	/^#define READ_ONCE_LEN /;"	d	file:
RECEIVE	include/sys/const.h	/^#define RECEIVE	/;"	d
RECEIVING	include/sys/const.h	/^#define RECEIVING /;"	d
RED	include/sys/const.h	/^#define RED /;"	d
RED_CHAR	include/sys/console.h	/^#define RED_CHAR	/;"	d
REG_ALT_STATUS	include/sys/hd.h	/^#define REG_ALT_STATUS	/;"	d
REG_CMD	include/sys/hd.h	/^#define REG_CMD	/;"	d
REG_DATA	include/sys/hd.h	/^#define REG_DATA	/;"	d
REG_DEVICE	include/sys/hd.h	/^#define REG_DEVICE	/;"	d
REG_DEV_CTRL	include/sys/hd.h	/^#define REG_DEV_CTRL	/;"	d
REG_DRV_ADDR	include/sys/hd.h	/^#define REG_DRV_ADDR	/;"	d
REG_ERROR	include/sys/hd.h	/^#define REG_ERROR	/;"	d
REG_FEATURES	include/sys/hd.h	/^#define REG_FEATURES	/;"	d
REG_LBA_HIGH	include/sys/hd.h	/^#define REG_LBA_HIGH	/;"	d
REG_LBA_LOW	include/sys/hd.h	/^#define REG_LBA_LOW	/;"	d
REG_LBA_MID	include/sys/hd.h	/^#define REG_LBA_MID	/;"	d
REG_NSECTOR	include/sys/hd.h	/^#define REG_NSECTOR	/;"	d
REG_STATUS	include/sys/hd.h	/^#define REG_STATUS	/;"	d
REQUEST	include/sys/const.h	/^#define	REQUEST	/;"	d
RESUME_PROC	include/sys/const.h	/^	SUSPEND_PROC, RESUME_PROC,$/;"	e	enum:msgtype
RETVAL	include/sys/const.h	/^#define	RETVAL	/;"	d
RIGHT	include/sys/keyboard.h	/^#define RIGHT	/;"	d
ROOT_DEV	include/sys/const.h	/^#define	ROOT_DEV	/;"	d
ROOT_INODE	include/sys/const.h	/^#define	ROOT_INODE	/;"	d
RPL_KRNL	include/sys/const.h	/^#define	RPL_KRNL	/;"	d
RPL_TASK	include/sys/const.h	/^#define	RPL_TASK	/;"	d
RPL_USER	include/sys/const.h	/^#define	RPL_USER	/;"	d
RS232_IRQ	include/sys/const.h	/^#define	RS232_IRQ	/;"	d
ReadSector	boot/boot.asm	/^ReadSector:$/;"	l
ReadSector	boot/loader.asm	/^ReadSector:$/;"	l
SA_RPL0	include/sys/protect.h	/^#define	SA_RPL0	/;"	d
SA_RPL1	include/sys/protect.h	/^#define	SA_RPL1	/;"	d
SA_RPL2	include/sys/protect.h	/^#define	SA_RPL2	/;"	d
SA_RPL3	include/sys/protect.h	/^#define	SA_RPL3	/;"	d
SA_RPL_MASK	include/sys/protect.h	/^#define	SA_RPL_MASK	/;"	d
SA_TIG	include/sys/protect.h	/^#define	SA_TIG	/;"	d
SA_TIL	include/sys/protect.h	/^#define	SA_TIL	/;"	d
SA_TI_MASK	include/sys/protect.h	/^#define	SA_TI_MASK	/;"	d
SCROLL_LOCK	include/sys/keyboard.h	/^#define SCROLL_LOCK	/;"	d
SCR_DN	include/sys/console.h	/^#define SCR_DN	/;"	d
SCR_SIZE	include/sys/console.h	/^#define SCR_SIZE	/;"	d
SCR_UP	include/sys/console.h	/^#define SCR_UP	/;"	d
SCR_WIDTH	include/sys/console.h	/^#define SCR_WIDTH	/;"	d
SECOND	include/sys/const.h	/^#define  SECOND /;"	d
SECONDARY_IRQ	include/sys/const.h	/^#define	SECONDARY_IRQ	/;"	d
SECTOR_BITS	include/sys/const.h	/^#define SECTOR_BITS	/;"	d
SECTOR_SIZE	include/sys/const.h	/^#define SECTOR_SIZE	/;"	d
SECTOR_SIZE_SHIFT	include/sys/const.h	/^#define SECTOR_SIZE_SHIFT	/;"	d
SECT_BUF_SIZE	boot/hdboot.asm	/^SECT_BUF_SIZE		equ	TRANS_SECT_NR * 512$/;"	d
SECT_BUF_SIZE	boot/hdldr.asm	/^SECT_BUF_SIZE		equ	TRANS_SECT_NR * 512$/;"	d
SEEK_CUR	include/stdio.h	/^#define SEEK_CUR	/;"	d
SEEK_END	include/stdio.h	/^#define SEEK_END	/;"	d
SEEK_SET	include/stdio.h	/^#define SEEK_SET	/;"	d
SELECTOR_DUMMY	include/sys/protect.h	/^#define	SELECTOR_DUMMY	/;"	d
SELECTOR_FLAT_C	include/sys/protect.h	/^#define	SELECTOR_FLAT_C	/;"	d
SELECTOR_FLAT_RW	include/sys/protect.h	/^#define	SELECTOR_FLAT_RW	/;"	d
SELECTOR_KERNEL_CS	include/sys/protect.h	/^#define	SELECTOR_KERNEL_CS	/;"	d
SELECTOR_KERNEL_DS	include/sys/protect.h	/^#define	SELECTOR_KERNEL_DS	/;"	d
SELECTOR_KERNEL_GS	include/sys/protect.h	/^#define	SELECTOR_KERNEL_GS	/;"	d
SELECTOR_LDT_FIRST	include/sys/protect.h	/^#define SELECTOR_LDT_FIRST	/;"	d
SELECTOR_TSS	include/sys/protect.h	/^#define	SELECTOR_TSS	/;"	d
SELECTOR_VIDEO	include/sys/protect.h	/^#define	SELECTOR_VIDEO	/;"	d
SEND	include/sys/const.h	/^#define SEND	/;"	d
SENDING	include/sys/const.h	/^#define SENDING /;"	d
SET_LOG_SECT_SMAP_AT_STARTUP	include/sys/config.h	/^#define SET_LOG_SECT_SMAP_AT_STARTUP$/;"	d
SHIFT_L	include/sys/keyboard.h	/^#define SHIFT_L	/;"	d
SHIFT_R	include/sys/keyboard.h	/^#define SHIFT_R	/;"	d
SLEEP	include/sys/keyboard.h	/^#define SLEEP	/;"	d
STACK_BASE	boot/hdboot.asm	/^STACK_BASE		equ	0x7C00	; base address of stack when booting$/;"	d
STACK_SIZE_DEFAULT	include/sys/proc.h	/^#define	STACK_SIZE_DEFAULT	/;"	d
STACK_SIZE_FS	include/sys/proc.h	/^#define STACK_SIZE_FS	/;"	d
STACK_SIZE_HD	include/sys/proc.h	/^#define STACK_SIZE_HD	/;"	d
STACK_SIZE_INIT	include/sys/proc.h	/^#define STACK_SIZE_INIT	/;"	d
STACK_SIZE_MM	include/sys/proc.h	/^#define STACK_SIZE_MM	/;"	d
STACK_SIZE_SYS	include/sys/proc.h	/^#define STACK_SIZE_SYS	/;"	d
STACK_SIZE_TESTA	include/sys/proc.h	/^#define STACK_SIZE_TESTA	/;"	d
STACK_SIZE_TESTB	include/sys/proc.h	/^#define STACK_SIZE_TESTB	/;"	d
STACK_SIZE_TESTC	include/sys/proc.h	/^#define STACK_SIZE_TESTC	/;"	d
STACK_SIZE_TOTAL	include/sys/proc.h	/^#define STACK_SIZE_TOTAL	/;"	d
STACK_SIZE_TTY	include/sys/proc.h	/^#define STACK_SIZE_TTY	/;"	d
START_ADDR_H	include/sys/const.h	/^#define	START_ADDR_H	/;"	d
START_ADDR_L	include/sys/const.h	/^#define	START_ADDR_L	/;"	d
STAT	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK, LS,$/;"	e	enum:msgtype
STATUS	include/sys/const.h	/^#define	STATUS	/;"	d
STATUS_BSY	include/sys/hd.h	/^#define	STATUS_BSY	/;"	d
STATUS_CORR	include/sys/hd.h	/^#define	STATUS_CORR	/;"	d
STATUS_DFSE	include/sys/hd.h	/^#define	STATUS_DFSE	/;"	d
STATUS_DRDY	include/sys/hd.h	/^#define	STATUS_DRDY	/;"	d
STATUS_DRQ	include/sys/hd.h	/^#define	STATUS_DRQ	/;"	d
STATUS_DSC	include/sys/hd.h	/^#define	STATUS_DSC	/;"	d
STATUS_ERR	include/sys/hd.h	/^#define	STATUS_ERR	/;"	d
STATUS_IDX	include/sys/hd.h	/^#define	STATUS_IDX	/;"	d
STR_DEFAULT_LEN	include/stdio.h	/^#define	STR_DEFAULT_LEN	/;"	d
SUPER_BLOCK_SIZE	include/sys/fs.h	/^#define	SUPER_BLOCK_SIZE	/;"	d
SUSPEND_PROC	include/sys/const.h	/^	SUSPEND_PROC, RESUME_PROC,$/;"	e	enum:msgtype
SYSCALL_RET	include/sys/const.h	/^	SYSCALL_RET,$/;"	e	enum:msgtype
SYSLOG	include/stdio.h	/^#define SYSLOG /;"	d
SelectorFlatC	boot/hdldr.asm	/^SelectorFlatC		equ	LABEL_DESC_FLAT_C	- LABEL_GDT$/;"	d
SelectorFlatC	boot/loader.asm	/^SelectorFlatC		equ	LABEL_DESC_FLAT_C	- LABEL_GDT$/;"	d
SelectorFlatRW	boot/hdldr.asm	/^SelectorFlatRW		equ	LABEL_DESC_FLAT_RW	- LABEL_GDT$/;"	d
SelectorFlatRW	boot/loader.asm	/^SelectorFlatRW		equ	LABEL_DESC_FLAT_RW	- LABEL_GDT$/;"	d
SelectorVideo	boot/hdldr.asm	/^SelectorVideo		equ	LABEL_DESC_VIDEO	- LABEL_GDT + SA_RPL3$/;"	d
SelectorVideo	boot/loader.asm	/^SelectorVideo		equ	LABEL_DESC_VIDEO	- LABEL_GDT + SA_RPL3$/;"	d
SetupPaging	boot/hdldr.asm	/^SetupPaging:$/;"	l
SetupPaging	boot/loader.asm	/^SetupPaging:$/;"	l
StackSpace	boot/hdldr.asm	/^StackSpace:	times	1000h	db	0$/;"	l
StackSpace	boot/loader.asm	/^StackSpace:	times	1000h	db	0$/;"	l
StackSpace	kernel/kernel.asm	/^StackSpace		resb	8 * 1024$/;"	l
StackTop	kernel/kernel.asm	/^StackTop:		; 栈顶$/;"	l
TAB	include/sys/keyboard.h	/^#define TAB	/;"	d
TASK_FS	include/sys/const.h	/^#define TASK_FS	/;"	d
TASK_HD	include/sys/const.h	/^#define TASK_HD	/;"	d
TASK_MM	include/sys/const.h	/^#define TASK_MM	/;"	d
TASK_SYS	include/sys/const.h	/^#define TASK_SYS	/;"	d
TASK_TTY	include/sys/const.h	/^#define TASK_TTY	/;"	d
TIMER0	include/sys/const.h	/^#define TIMER0 /;"	d
TIMER_FREQ	include/sys/const.h	/^#define TIMER_FREQ /;"	d
TIMER_MODE	include/sys/const.h	/^#define TIMER_MODE /;"	d
TRANS_SECT_NR	boot/hdboot.asm	/^TRANS_SECT_NR		equ	2$/;"	d
TRANS_SECT_NR	boot/hdldr.asm	/^TRANS_SECT_NR		equ	2$/;"	d
TTY	include/sys/tty.h	/^}TTY;$/;"	t	typeref:struct:s_tty
TTY_END	kernel/tty.c	/^#define TTY_END /;"	d	file:
TTY_FIRST	kernel/tty.c	/^#define TTY_FIRST /;"	d	file:
TTY_IN_BYTES	include/sys/tty.h	/^#define TTY_IN_BYTES	/;"	d
TTY_OUT_BUF_LEN	include/sys/tty.h	/^#define TTY_OUT_BUF_LEN	/;"	d
TestA	kernel/main.c	/^void TestA()$/;"	f	typeref:typename:void
TestB	kernel/main.c	/^void TestB()$/;"	f	typeref:typename:void
TestC	kernel/main.c	/^void TestC()$/;"	f	typeref:typename:void
TopOfStack	boot/hdldr.asm	/^TopOfStack	equ	LOADER_PHY_ADDR + $	; 栈顶$/;"	d
TopOfStack	boot/loader.asm	/^TopOfStack	equ	LOADER_PHY_ADDR + $	; 栈顶$/;"	d
UNLINK	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK, LS,$/;"	e	enum:msgtype
UP	include/sys/keyboard.h	/^#define UP	/;"	d
V_MEM_BASE	include/sys/const.h	/^#define	V_MEM_BASE	/;"	d
V_MEM_SIZE	include/sys/const.h	/^#define	V_MEM_SIZE	/;"	d
WAIT	include/sys/const.h	/^	EXEC, WAIT, PS, KILL, $/;"	e	enum:msgtype
WAITING	include/sys/const.h	/^#define WAITING /;"	d
WAKE	include/sys/keyboard.h	/^#define WAKE	/;"	d
WHENCE	include/sys/const.h	/^#define	WHENCE	/;"	d
WHITE	include/sys/const.h	/^#define WHITE /;"	d
WRITE	include/sys/const.h	/^	OPEN, CLOSE, READ, WRITE, LSEEK, STAT, UNLINK, LS,$/;"	e	enum:msgtype
WRITETOBUF	mm/main.c	/^#define WRITETOBUF(/;"	d	file:
WR_SECT	include/sys/fs.h	/^#define WR_SECT(/;"	d
XT_WINI_IRQ	include/sys/const.h	/^#define	XT_WINI_IRQ	/;"	d
XX	mm/main.c	/^#define XX(/;"	d	file:
YEAR	include/sys/const.h	/^#define  YEAR /;"	d
_ARDStruct	boot/hdldr.asm	/^_ARDStruct:			; Address Range Descriptor Structure$/;"	l
_ARDStruct	boot/loader.asm	/^_ARDStruct:			; Address Range Descriptor Structure$/;"	l
_MemChkBuf	boot/hdldr.asm	/^_MemChkBuf:	times	256	db	0$/;"	l
_MemChkBuf	boot/loader.asm	/^_MemChkBuf:	times	256	db	0$/;"	l
_NR_printx	lib/syscall.asm	/^_NR_printx	    equ 0$/;"	d
_NR_sendrec	lib/syscall.asm	/^_NR_sendrec	    equ 1$/;"	d
_ORANGES_CONSOLE_H_	include/sys/console.h	/^#define _ORANGES_CONSOLE_H_$/;"	d
_ORANGES_CONST_H_	include/sys/const.h	/^#define	_ORANGES_CONST_H_$/;"	d
_ORANGES_FS_H_	include/sys/fs.h	/^#define	_ORANGES_FS_H_$/;"	d
_ORANGES_HD_H_	include/sys/hd.h	/^#define	_ORANGES_HD_H_$/;"	d
_ORANGES_KEYBOARD_H_	include/sys/keyboard.h	/^#define	_ORANGES_KEYBOARD_H_$/;"	d
_ORANGES_KEYMAP_H_	include/sys/keymap.h	/^#define	_ORANGES_KEYMAP_H_$/;"	d
_ORANGES_PROTECT_H_	include/sys/protect.h	/^#define	_ORANGES_PROTECT_H_$/;"	d
_ORANGES_STDIO_H_	include/stdio.h	/^#define	_ORANGES_STDIO_H_$/;"	d
_ORANGES_TTY_H_	include/sys/tty.h	/^#define _ORANGES_TTY_H_$/;"	d
_ORANGES_TYPE_H_	include/type.h	/^#define	_ORANGES_TYPE_H_$/;"	d
__anon6e8aff300108	include/type.h	/^typedef struct {$/;"	s
__anon6e8aff30020a	include/type.h	/^	union {$/;"	u	struct:__anon6e8aff300108
_buf	fs/disklog.c	/^static char _buf[SECTOR_SIZE];$/;"	v	typeref:typename:char[]	file:
_dwBaseAddrHigh	boot/hdldr.asm	/^	_dwBaseAddrHigh:	dd	0$/;"	d
_dwBaseAddrHigh	boot/loader.asm	/^	_dwBaseAddrHigh:	dd	0$/;"	d
_dwBaseAddrLow	boot/hdldr.asm	/^	_dwBaseAddrLow:		dd	0$/;"	d
_dwBaseAddrLow	boot/loader.asm	/^	_dwBaseAddrLow:		dd	0$/;"	d
_dwDispPos	boot/hdldr.asm	/^_dwDispPos:			dd	(80 * 7 + 0) * 2	; 屏幕第 7 行, 第 0 列。$/;"	d
_dwDispPos	boot/loader.asm	/^_dwDispPos:			dd	(80 * 7 + 0) * 2	; 屏幕第 7 行, 第 0 列。$/;"	d
_dwLengthHigh	boot/hdldr.asm	/^	_dwLengthHigh:		dd	0$/;"	d
_dwLengthHigh	boot/loader.asm	/^	_dwLengthHigh:		dd	0$/;"	d
_dwLengthLow	boot/hdldr.asm	/^	_dwLengthLow:		dd	0$/;"	d
_dwLengthLow	boot/loader.asm	/^	_dwLengthLow:		dd	0$/;"	d
_dwMCRNumber	boot/hdldr.asm	/^_dwMCRNumber:			dd	0	; Memory Check Result$/;"	d
_dwMCRNumber	boot/loader.asm	/^_dwMCRNumber:			dd	0	; Memory Check Result$/;"	d
_dwMemSize	boot/hdldr.asm	/^_dwMemSize:			dd	0$/;"	d
_dwMemSize	boot/loader.asm	/^_dwMemSize:			dd	0$/;"	d
_dwType	boot/hdldr.asm	/^	_dwType:		dd	0$/;"	d
_dwType	boot/loader.asm	/^	_dwType:		dd	0$/;"	d
_start	command/start.asm	/^_start:$/;"	l
_start	kernel/kernel.asm	/^_start:$/;"	l
_szMemChkTitle	boot/hdldr.asm	/^_szMemChkTitle:			db	"BaseAddrL BaseAddrH LengthLow LengthHigh   Type", 0Ah, 0$/;"	d
_szMemChkTitle	boot/loader.asm	/^_szMemChkTitle:			db	"BaseAddrL BaseAddrH LengthLow LengthHigh   Type", 0Ah, 0$/;"	d
_szRAMSize	boot/hdldr.asm	/^_szRAMSize:			db	"RAM size: ", 0$/;"	d
_szRAMSize	boot/loader.asm	/^_szRAMSize:			db	"RAM size: ", 0$/;"	d
_szReturn	boot/hdldr.asm	/^_szReturn:			db	0Ah, 0$/;"	d
_szReturn	boot/loader.asm	/^_szReturn:			db	0Ah, 0$/;"	d
_unused	include/sys/fs.h	/^	u8	_unused[16];	\/**< Stuff for alignment *\/$/;"	m	struct:inode	typeref:typename:u8[16]
add	boot/boot.asm	/^	add	di, 01Ah		; di -> 首 Sector$/;"	d
add	boot/boot.asm	/^	add	di, 20h			;      ┃$/;"	d
add	boot/hdldr.asm	/^	add	di, 20$/;"	d
add	boot/loader.asm	/^	add	dh, 3			; 从第 3 行往下显示$/;"	d
add	boot/loader.asm	/^	add	di, 01Ah		; di -> 首 Sector$/;"	d
add	boot/loader.asm	/^	add	di, 20$/;"	d
add	boot/loader.asm	/^	add	di, 20h			;     ┃$/;"	d
all	Makefile	/^all : realclean everything$/;"	t
all	command/Makefile	/^all : realclean everything$/;"	t
alloc_imap_bit	fs/open.c	/^PRIVATE int alloc_imap_bit(int dev)$/;"	f	typeref:typename:PRIVATE int
alloc_mem	mm/main.c	/^PUBLIC int alloc_mem(int pid, int memsize)$/;"	f	typeref:typename:PUBLIC int
alloc_smap_bit	fs/open.c	/^PRIVATE int alloc_smap_bit(int dev, int nr_sects_to_alloc)$/;"	f	typeref:typename:PRIVATE int
alt_l	kernel/keyboard.c	/^PRIVATE int alt_l; \/* l alt state		*\/$/;"	v	typeref:typename:PRIVATE int
alt_r	kernel/keyboard.c	/^PRIVATE int alt_r; \/* r left state		*\/$/;"	v	typeref:typename:PRIVATE int
and	boot/boot.asm	/^	and	dh, 1			; dh & 1 = 磁头号$/;"	d
and	boot/boot.asm	/^	and	di, 0FFE0h		; di -> 当前条目的开始$/;"	d
and	boot/boot.asm	/^	and	di, 0FFE0h		; else ┓	di &= E0 为了让它指向本条目开头$/;"	d
and	boot/loader.asm	/^	and	dh, 1			; dh & 1 = 磁头号$/;"	d
and	boot/loader.asm	/^	and	di, 0FFE0h		; else┓	这时di的值不知道是什么, di &= e0 为了让它是 20h 的倍/;"	d
and	boot/loader.asm	/^	and	di, 0FFF0h		; di -> 当前条目的开始$/;"	d
args	command/cat.c	/^int args;$/;"	v	typeref:typename:int
args	command/echo.c	/^int args;$/;"	v	typeref:typename:int
args	command/edit.c	/^int args;$/;"	v	typeref:typename:int
args	command/kill.c	/^int args;$/;"	v	typeref:typename:int
args	command/rm.c	/^int args;$/;"	v	typeref:typename:int
args	command/stat.c	/^int args;$/;"	v	typeref:typename:int
args	command/touch.c	/^int args;$/;"	v	typeref:typename:int
assert	include/stdio.h	/^#define assert(/;"	d
assertion_failure	lib/misc.c	/^PUBLIC void assertion_failure(char *exp, char *file, char *base_file, int line)$/;"	f	typeref:typename:PUBLIC void
atoi	command/kill.c	/^int atoi(const char *str)$/;"	f	typeref:typename:int
attr	include/sys/protect.h	/^	u8	attr;		\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:gate	typeref:typename:u8
attr1	include/sys/protect.h	/^	u8	attr1;			\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:descriptor	typeref:typename:u8
bOdd	boot/boot.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
bOdd	boot/hdldr.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
bOdd	boot/loader.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
backlink	include/sys/protect.h	/^	u32	backlink;$/;"	m	struct:tss	typeref:typename:u32
base	include/sys/hd.h	/^	u32	base;	\/* # of start sector (NOT byte offset, but SECTOR) *\/$/;"	m	struct:part_info	typeref:typename:u32
base_high	include/sys/protect.h	/^	u8	base_high;		\/* Base *\/$/;"	m	struct:descriptor	typeref:typename:u8
base_low	include/sys/protect.h	/^	u16	base_low;		\/* Base *\/$/;"	m	struct:descriptor	typeref:typename:u16
base_mid	include/sys/protect.h	/^	u8	base_mid;		\/* Base *\/$/;"	m	struct:descriptor	typeref:typename:u8
begin	boot/hdldr.asm	/^.begin:$/;"	l
begin	boot/loader.asm	/^.begin:$/;"	l
bits	command/start.asm	/^bits 32$/;"	l
bits	kernel/kernel.asm	/^bits 32$/;"	l
bits	lib/syscall.asm	/^bits 32$/;"	l
block	kernel/proc.c	/^PRIVATE void block(struct proc *p)$/;"	f	typeref:typename:PRIVATE void
boot/boot.bin	Makefile	/^boot\/boot.bin : boot\/boot.asm boot\/include\/load.inc boot\/include\/fat12hdr.inc$/;"	t
boot/hdboot.bin	Makefile	/^boot\/hdboot.bin : boot\/hdboot.asm boot\/include\/load.inc boot\/include\/fat12hdr.inc$/;"	t
boot/hdldr.bin	Makefile	/^boot\/hdldr.bin : boot\/hdldr.asm boot\/include\/load.inc boot\/include\/fat12hdr.inc boot\/incl/;"	t
boot/loader.bin	Makefile	/^boot\/loader.bin : boot\/loader.asm boot\/include\/load.inc boot\/include\/fat12hdr.inc boot\/in/;"	t
boot_ind	include/sys/hd.h	/^	u8 boot_ind;		\/**$/;"	m	struct:part_ent	typeref:typename:u8
boot_params	include/type.h	/^struct boot_params {$/;"	s
boot_start	boot/hdboot.asm	/^boot_start:$/;"	l
bounds_check	kernel/kernel.asm	/^bounds_check:$/;"	l
breakpoint_exception	kernel/kernel.asm	/^breakpoint_exception:$/;"	l
buf	include/sys/keyboard.h	/^	char	buf[KB_IN_BYTES];	\/* 缓冲区 *\/$/;"	m	struct:kb_inbuf	typeref:typename:char[]
buildimg	Makefile	/^buildimg :$/;"	t
caps_lock	kernel/keyboard.c	/^PRIVATE int caps_lock; \/* Caps Lock		*\/$/;"	v	typeref:typename:PRIVATE int
cat	command/Makefile	/^cat : cat.o start.o $(LIB)$/;"	t
cat.o	command/Makefile	/^cat.o: cat.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
chksum	kernel/main.c	/^	char chksum[8]; \/* 148 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[8]	file:
clean	Makefile	/^clean :$/;"	t
clean	command/Makefile	/^clean :$/;"	t
cleanup	mm/forkexit.c	/^PRIVATE void cleanup(struct proc *proc)$/;"	f	typeref:typename:PRIVATE void
clear_screen	boot/hdboot.asm	/^clear_screen:$/;"	l
clear_screen	boot/hdldr.asm	/^clear_screen:$/;"	l
clear_screen	kernel/console.c	/^PRIVATE void clear_screen(int pos, int len)$/;"	f	typeref:typename:PRIVATE void
clock_handler	kernel/clock.c	/^PUBLIC void clock_handler(int irq)$/;"	f	typeref:typename:PUBLIC void
clock_int_msg	kernel/kernel.asm	/^clock_int_msg		db	"^", 0$/;"	d
close	lib/close.c	/^PUBLIC int close(int fd)$/;"	f	typeref:typename:PUBLIC int
cmp	boot/boot.asm	/^	cmp	dx, 0					; ┓循环次数控制,$/;"	d
cmp	boot/boot.asm	/^	cmp	dx, 0$/;"	d
cmp	boot/loader.asm	/^	cmp	dx, 0					; ┓$/;"	d
cmp	boot/loader.asm	/^	cmp	dx, 0$/;"	d
code_with_E0	kernel/keyboard.c	/^PRIVATE int code_with_E0;$/;"	v	typeref:typename:PRIVATE int
column	kernel/keyboard.c	/^PRIVATE int column;$/;"	v	typeref:typename:PRIVATE int
command	include/sys/hd.h	/^	u8	command;$/;"	m	struct:hd_cmd	typeref:typename:u8
con_size	include/sys/console.h	/^	unsigned int	con_size;   \/* how many words does the console have *\/$/;"	m	struct:s_console	typeref:typename:unsigned int
console	include/sys/tty.h	/^	struct s_console *	console;$/;"	m	struct:s_tty	typeref:struct:s_console *
console_table	kernel/global.c	/^PUBLIC CONSOLE console_table[NR_CONSOLES];$/;"	v	typeref:typename:PUBLIC CONSOLE[]
copr_error	kernel/kernel.asm	/^copr_error:$/;"	l
copr_not_available	kernel/kernel.asm	/^copr_not_available:$/;"	l
copr_seg_overrun	kernel/kernel.asm	/^copr_seg_overrun:$/;"	l
count	include/sys/hd.h	/^	u8	count;$/;"	m	struct:hd_cmd	typeref:typename:u8
count	include/sys/keyboard.h	/^	int	count;			\/* 缓冲区中共有多少字节 *\/$/;"	m	struct:kb_inbuf	typeref:typename:int
cr3	include/sys/protect.h	/^	u32	cr3;$/;"	m	struct:tss	typeref:typename:u32
create_file	fs/open.c	/^PRIVATE struct inode *create_file(char *path, int flags)$/;"	f	typeref:typename:PRIVATE struct inode *
crtc_start	include/sys/console.h	/^	unsigned int	crtc_start; \/* set CRTC start addr reg *\/$/;"	m	struct:s_console	typeref:typename:unsigned int
cs	include/sys/proc.h	/^	u32	cs;		\/*  ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
cs	include/sys/protect.h	/^	u32	cs;$/;"	m	struct:tss	typeref:typename:u32
csinit	kernel/kernel.asm	/^csinit:		; “这个跳转指令强制使用刚刚初始化的结构”——<<OS:D&I 2nd>> P90.$/;"	l
cstart	kernel/start.c	/^PUBLIC void cstart()$/;"	f	typeref:typename:PUBLIC void
ctrl_l	kernel/keyboard.c	/^PRIVATE int ctrl_l; \/* l ctrl state		*\/$/;"	v	typeref:typename:PRIVATE int
ctrl_r	kernel/keyboard.c	/^PRIVATE int ctrl_r; \/* l ctrl state		*\/$/;"	v	typeref:typename:PRIVATE int
current_char	kernel/kliba.asm	/^.current_char:	dd	0$/;"	d
current_console	include/sys/global.h	/^EXTERN	int	current_console;$/;"	v	typeref:typename:EXTERN int
cursor	include/sys/console.h	/^	unsigned int	cursor;$/;"	m	struct:s_console	typeref:typename:unsigned int
day	include/stdio.h	/^	u32 day;$/;"	m	struct:time	typeref:typename:u32
dcount	include/sys/protect.h	/^	u8	dcount;		\/* 该字段只在调用门描述符中有效。$/;"	m	struct:gate	typeref:typename:u8
dd_map	kernel/global.c	/^struct dev_drv_map dd_map[] = {$/;"	v	typeref:struct:dev_drv_map[]
deadlock	kernel/proc.c	/^PRIVATE int deadlock(int src, int dest)$/;"	f	typeref:typename:PRIVATE int
dec	boot/boot.asm	/^	dec	dx					; ┛就跳到下一个 Sector$/;"	d
dec	boot/loader.asm	/^	dec	dx					; ┛$/;"	d
delay	kernel/klib.c	/^PUBLIC void delay(int time)$/;"	f	typeref:typename:PUBLIC void
desc	fs/disklog.c	/^		int desc; \/* idx of f_desc_table[] *\/$/;"	m	struct:dump_fd_graph::fdesc_inode_map	typeref:typename:int	file:
desc	fs/disklog.c	/^		int desc; \/* idx of f_desc_table[] *\/$/;"	m	struct:dump_fd_graph::proc_fdesc_map	typeref:typename:int	file:
desc	kernel/hd.c	/^		char *desc;$/;"	m	struct:print_identify_info::iden_info_ascii	typeref:typename:char *	file:
descriptor	include/sys/protect.h	/^struct descriptor		\/* 共 8 个字节 *\/$/;"	s
dev_drv_map	include/sys/fs.h	/^struct dev_drv_map {$/;"	s
device	include/sys/hd.h	/^	u8	device;$/;"	m	struct:hd_cmd	typeref:typename:u8
devmajor	kernel/main.c	/^	char devmajor[8]; \/* 329 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[8]	file:
devminor	kernel/main.c	/^	char devminor[8]; \/* 337 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[8]	file:
different	boot/hdboot.asm	/^.different:$/;"	l
different	boot/hdldr.asm	/^.different:$/;"	l
dir	fs/disklog.c	/^		int dir;$/;"	m	struct:dump_fd_graph::msg_src_dst	typeref:typename:int	file:
dir_ent_fname_off	include/sys/fs.h	/^	u32	dir_ent_fname_off;\/**< Offset of `struct dir_entry::name' *\/$/;"	m	struct:super_block	typeref:typename:u32
dir_ent_inode_off	include/sys/fs.h	/^	u32	dir_ent_inode_off;\/**< Offset of `struct dir_entry::inode_nr' *\/$/;"	m	struct:super_block	typeref:typename:u32
dir_ent_size	include/sys/fs.h	/^	u32	dir_ent_size;     \/**< DIR_ENTRY_SIZE *\/$/;"	m	struct:super_block	typeref:typename:u32
dir_entry	include/sys/fs.h	/^struct dir_entry {$/;"	s
dis_already	kernel/kliba.asm	/^dis_already:$/;"	l
disable_0	kernel/kliba.asm	/^disable_0:$/;"	l
disable_8	kernel/kliba.asm	/^disable_8:$/;"	l
disable_int	kernel/kliba.asm	/^disable_int:$/;"	l
disable_irq	kernel/kliba.asm	/^disable_irq:$/;"	l
disasm	Makefile	/^disasm :$/;"	t
disk_address_packet	boot/hdboot.asm	/^disk_address_packet:	db	0x10		; [ 0] Packet size in bytes.$/;"	d
disk_address_packet	boot/hdldr.asm	/^disk_address_packet:	db	0x10		; [ 0] Packet size in bytes. Must be 0x10 or greater.$/;"	d
disklog	fs/disklog.c	/^PUBLIC int disklog(char *logstr)$/;"	f	typeref:typename:PUBLIC int
disp_color_str	kernel/kliba.asm	/^disp_color_str:$/;"	l
disp_int	kernel/klib.c	/^PUBLIC void disp_int(int input)$/;"	f	typeref:typename:PUBLIC void
disp_pos	include/sys/global.h	/^EXTERN	int	disp_pos;$/;"	v	typeref:typename:EXTERN int
disp_stat	command/stat.c	/^void disp_stat(struct stat *s)$/;"	f	typeref:typename:void
disp_str	boot/hdboot.asm	/^disp_str:$/;"	l
disp_str	kernel/kliba.asm	/^disp_str:$/;"	l
divide_error	kernel/kernel.asm	/^divide_error:$/;"	l
do_append	command/edit.c	/^void do_append()$/;"	f	typeref:typename:void
do_close	fs/open.c	/^PUBLIC int do_close()$/;"	f	typeref:typename:PUBLIC int
do_exec	mm/exec.c	/^PUBLIC int do_exec()$/;"	f	typeref:typename:PUBLIC int
do_exit	mm/forkexit.c	/^PUBLIC void do_exit(int status)$/;"	f	typeref:typename:PUBLIC void
do_fork	mm/forkexit.c	/^PUBLIC int do_fork()$/;"	f	typeref:typename:PUBLIC int
do_kill	mm/main.c	/^PRIVATE int do_kill()$/;"	f	typeref:typename:PRIVATE int
do_ls	fs/main.c	/^PRIVATE void do_ls()$/;"	f	typeref:typename:PRIVATE void
do_lseek	fs/open.c	/^PUBLIC int do_lseek()$/;"	f	typeref:typename:PUBLIC int
do_open	fs/open.c	/^PUBLIC int do_open()$/;"	f	typeref:typename:PUBLIC int
do_ps	mm/main.c	/^PRIVATE void do_ps()$/;"	f	typeref:typename:PRIVATE void
do_rdwt	fs/read_write.c	/^PUBLIC int do_rdwt()$/;"	f	typeref:typename:PUBLIC int
do_stat	fs/misc.c	/^PUBLIC int do_stat()$/;"	f	typeref:typename:PUBLIC int
do_trunc	command/edit.c	/^void do_trunc()$/;"	f	typeref:typename:void
do_unlink	fs/link.c	/^PUBLIC int do_unlink()$/;"	f	typeref:typename:PUBLIC int
do_wait	mm/forkexit.c	/^PUBLIC void do_wait()$/;"	f	typeref:typename:PUBLIC void
done	boot/hdboot.asm	/^.done:$/;"	l
done	boot/hdldr.asm	/^.done:$/;"	l
double_fault	kernel/kernel.asm	/^double_fault:$/;"	l
driver_nr	include/sys/fs.h	/^	int driver_nr; \/**< The proc nr.\\ of the device driver. *\/$/;"	m	struct:dev_drv_map	typeref:typename:int
ds	include/sys/proc.h	/^	u32	ds;		\/* ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
ds	include/sys/protect.h	/^	u32	ds;$/;"	m	struct:tss	typeref:typename:u32
dst	fs/disklog.c	/^		int dst;$/;"	m	struct:dump_fd_graph::msg_src_dst	typeref:typename:int	file:
dump_fd_graph	fs/disklog.c	/^PUBLIC void dump_fd_graph(const char *fmt, ...)$/;"	f	typeref:typename:PUBLIC void
dump_msg	kernel/proc.c	/^PUBLIC void dump_msg(const char *title, MESSAGE *m)$/;"	f	typeref:typename:PUBLIC void
dump_proc	kernel/proc.c	/^PUBLIC void dump_proc(struct proc *p)$/;"	f	typeref:typename:PUBLIC void
dump_tty_buf	kernel/tty.c	/^PUBLIC void dump_tty_buf()$/;"	f	typeref:typename:PUBLIC void
dw	boot/boot.asm	/^dw 	0xaa55				; 结束标志$/;"	l
dw	boot/hdboot.asm	/^dw 	0xaa55		; 结束标志$/;"	l
dwBaseAddrHigh	boot/hdldr.asm	/^	dwBaseAddrHigh	equ	LOADER_PHY_ADDR + _dwBaseAddrHigh$/;"	d
dwBaseAddrHigh	boot/loader.asm	/^	dwBaseAddrHigh	equ	LOADER_PHY_ADDR + _dwBaseAddrHigh$/;"	d
dwBaseAddrLow	boot/hdldr.asm	/^	dwBaseAddrLow	equ	LOADER_PHY_ADDR + _dwBaseAddrLow$/;"	d
dwBaseAddrLow	boot/loader.asm	/^	dwBaseAddrLow	equ	LOADER_PHY_ADDR + _dwBaseAddrLow$/;"	d
dwDispPos	boot/hdldr.asm	/^dwDispPos		equ	LOADER_PHY_ADDR + _dwDispPos$/;"	d
dwDispPos	boot/loader.asm	/^dwDispPos		equ	LOADER_PHY_ADDR + _dwDispPos$/;"	d
dwKernelSize	boot/hdldr.asm	/^dwKernelSize		dd	0		; KERNEL.BIN 文件大小$/;"	d
dwKernelSize	boot/loader.asm	/^dwKernelSize		dd	0		; KERNEL.BIN 文件大小$/;"	d
dwLengthHigh	boot/hdldr.asm	/^	dwLengthHigh	equ	LOADER_PHY_ADDR + _dwLengthHigh$/;"	d
dwLengthHigh	boot/loader.asm	/^	dwLengthHigh	equ	LOADER_PHY_ADDR + _dwLengthHigh$/;"	d
dwLengthLow	boot/hdldr.asm	/^	dwLengthLow	equ	LOADER_PHY_ADDR + _dwLengthLow$/;"	d
dwLengthLow	boot/loader.asm	/^	dwLengthLow	equ	LOADER_PHY_ADDR + _dwLengthLow$/;"	d
dwMCRNumber	boot/hdldr.asm	/^dwMCRNumber		equ	LOADER_PHY_ADDR + _dwMCRNumber$/;"	d
dwMCRNumber	boot/loader.asm	/^dwMCRNumber		equ	LOADER_PHY_ADDR + _dwMCRNumber$/;"	d
dwMemSize	boot/hdldr.asm	/^dwMemSize		equ	LOADER_PHY_ADDR + _dwMemSize$/;"	d
dwMemSize	boot/loader.asm	/^dwMemSize		equ	LOADER_PHY_ADDR + _dwMemSize$/;"	d
dwType	boot/hdldr.asm	/^	dwType		equ	LOADER_PHY_ADDR + _dwType$/;"	d
dwType	boot/loader.asm	/^	dwType		equ	LOADER_PHY_ADDR + _dwType$/;"	d
eax	include/sys/proc.h	/^	u32	eax;		\/* ┛						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
eax	include/sys/protect.h	/^	u32	eax;$/;"	m	struct:tss	typeref:typename:u32
ebp	include/sys/proc.h	/^	u32	ebp;		\/* ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
ebp	include/sys/protect.h	/^	u32	ebp;$/;"	m	struct:tss	typeref:typename:u32
ebx	include/sys/proc.h	/^	u32	ebx;		\/* ┃						↑栈从高地址往低地址增长*\/		$/;"	m	struct:stackframe	typeref:typename:u32
ebx	include/sys/protect.h	/^	u32	ebx;$/;"	m	struct:tss	typeref:typename:u32
echo	command/Makefile	/^echo : echo.o start.o $(LIB)$/;"	t
echo.o	command/Makefile	/^echo.o: echo.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
ecx	include/sys/proc.h	/^	u32	ecx;		\/* ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
ecx	include/sys/protect.h	/^	u32	ecx;$/;"	m	struct:tss	typeref:typename:u32
edi	include/sys/proc.h	/^	u32	edi;		\/* ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
edi	include/sys/protect.h	/^	u32	edi;$/;"	m	struct:tss	typeref:typename:u32
edit	command/Makefile	/^edit : edit.o start.o $(LIB)$/;"	t
edit	command/edit.c	/^void edit(char *pathname)$/;"	f	typeref:typename:void
edit.o	command/Makefile	/^edit.o: edit.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
edit_buf	command/edit.c	/^char edit_buf[EDIT_BUF_SIZE];$/;"	v	typeref:typename:char[]
edit_pos	command/edit.c	/^int edit_pos;$/;"	v	typeref:typename:int
edx	include/sys/proc.h	/^	u32	edx;		\/* ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
edx	include/sys/protect.h	/^	u32	edx;$/;"	m	struct:tss	typeref:typename:u32
eflags	include/sys/proc.h	/^	u32	eflags;		\/*  ┣ these are pushed by CPU during interrupt	│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
eip	include/sys/proc.h	/^	u32	eip;		\/*  ┓						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
eip	include/sys/protect.h	/^	u32	eip;$/;"	m	struct:tss	typeref:typename:u32
enable_0	kernel/kliba.asm	/^enable_0:$/;"	l
enable_8	kernel/kliba.asm	/^enable_8:$/;"	l
enable_int	kernel/kliba.asm	/^enable_int:$/;"	l
enable_irq	kernel/kliba.asm	/^enable_irq:$/;"	l
end_cyl	include/sys/hd.h	/^	u8 end_cyl;		\/**$/;"	m	struct:part_ent	typeref:typename:u8
end_head	include/sys/hd.h	/^	u8 end_head;		\/**$/;"	m	struct:part_ent	typeref:typename:u8
end_sector	include/sys/hd.h	/^	u8 end_sector;		\/**$/;"	m	struct:part_ent	typeref:typename:u8
err	boot/hdboot.asm	/^err:$/;"	l
err	boot/hdldr.asm	/^err:$/;"	l
es	include/sys/proc.h	/^	u32	es;		\/* ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
es	include/sys/protect.h	/^	u32	es;$/;"	m	struct:tss	typeref:typename:u32
esi	include/sys/proc.h	/^	u32	esi;		\/* ┣ pushed by save()				│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
esi	include/sys/protect.h	/^	u32	esi;$/;"	m	struct:tss	typeref:typename:u32
esp	include/sys/proc.h	/^	u32	esp;		\/*  ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
esp	include/sys/protect.h	/^	u32	esp;$/;"	m	struct:tss	typeref:typename:u32
esp0	include/sys/protect.h	/^	u32	esp0;		\/* stack pointer to use during interrupt *\/$/;"	m	struct:tss	typeref:typename:u32
esp1	include/sys/protect.h	/^	u32	esp1;$/;"	m	struct:tss	typeref:typename:u32
esp2	include/sys/protect.h	/^	u32	esp2;$/;"	m	struct:tss	typeref:typename:u32
everything	Makefile	/^everything : $(ORANGESBOOT) $(ORANGESKERNEL)$/;"	t
everything	command/Makefile	/^everything : $(BIN)$/;"	t
exception	kernel/kernel.asm	/^exception:$/;"	l
exception_handler	kernel/protect.c	/^PUBLIC void exception_handler(int vec_no, int err_code, int eip, int cs,$/;"	f	typeref:typename:PUBLIC void
exe	command/edit.c	/^void exe(int args, char **argv)$/;"	f	typeref:typename:void
exe_buf	command/cat.c	/^char exe_buf[ARG_NR_MAX][PATH_NAME_LEN];$/;"	v	typeref:typename:char[][]
exe_buf	command/echo.c	/^char exe_buf[ARG_NR_MAX][PATH_NAME_LEN];$/;"	v	typeref:typename:char[][]
exe_buf	command/edit.c	/^char exe_buf[ARG_NR_MAX][PATH_NAME_LEN];$/;"	v	typeref:typename:char[][]
exe_buf	command/kill.c	/^char exe_buf[ARG_NR_MAX][PATH_NAME_LEN];$/;"	v	typeref:typename:char[][]
exe_buf	command/rm.c	/^char exe_buf[ARG_NR_MAX][PATH_NAME_LEN];$/;"	v	typeref:typename:char[][]
exe_buf	command/stat.c	/^char exe_buf[ARG_NR_MAX][PATH_NAME_LEN];$/;"	v	typeref:typename:char[][]
exe_buf	command/touch.c	/^char exe_buf[ARG_NR_MAX][PATH_NAME_LEN];$/;"	v	typeref:typename:char[][]
exe_helper	kernel/main.c	/^void exe_helper(char **sub_argv, int *ccount, int *sub_argc, int cmd)$/;"	f	typeref:typename:void
exec	lib/exec.c	/^PUBLIC int exec(const char *path)$/;"	f	typeref:typename:PUBLIC int
execl	lib/exec.c	/^PUBLIC int execl(const char *path, const char *arg, ...)$/;"	f	typeref:typename:PUBLIC int
execv	lib/exec.c	/^PUBLIC int execv(const char *path, char *argv[])$/;"	f	typeref:typename:PUBLIC int
exit	lib/exit.c	/^PUBLIC void exit(int status)$/;"	f	typeref:typename:PUBLIC void
exit_status	include/sys/proc.h	/^	int exit_status; \/**< for parent *\/$/;"	m	struct:proc	typeref:typename:int
extern	command/start.asm	/^extern	exit$/;"	l
extern	command/start.asm	/^extern	main$/;"	l
extern	kernel/kernel.asm	/^extern	clock_handler$/;"	l
extern	kernel/kernel.asm	/^extern	cstart$/;"	l
extern	kernel/kernel.asm	/^extern	delay$/;"	l
extern	kernel/kernel.asm	/^extern	disp_pos$/;"	l
extern	kernel/kernel.asm	/^extern	disp_str$/;"	l
extern	kernel/kernel.asm	/^extern	exception_handler$/;"	l
extern	kernel/kernel.asm	/^extern	gdt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern	idt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern	irq_table$/;"	l
extern	kernel/kernel.asm	/^extern	k_reenter$/;"	l
extern	kernel/kernel.asm	/^extern	kernel_main$/;"	l
extern	kernel/kernel.asm	/^extern	p_proc_ready$/;"	l
extern	kernel/kernel.asm	/^extern	spurious_irq$/;"	l
extern	kernel/kernel.asm	/^extern	sys_call_table$/;"	l
extern	kernel/kernel.asm	/^extern	tss$/;"	l
extern	kernel/kliba.asm	/^extern	disp_pos$/;"	l
f_desc_table	include/sys/global.h	/^EXTERN	struct file_desc	f_desc_table[NR_FILE_DESC];$/;"	v	typeref:struct:file_desc[]
fd_cnt	include/sys/fs.h	/^	int		fd_cnt;		\/**< How many procs share this desc *\/$/;"	m	struct:file_desc	typeref:typename:int
fd_inode	include/sys/fs.h	/^	struct inode*	fd_inode;	\/**< Ptr to the i-node *\/$/;"	m	struct:file_desc	typeref:struct:inode *
fd_mode	include/sys/fs.h	/^	int		fd_mode;	\/**< R or W *\/$/;"	m	struct:file_desc	typeref:typename:int
fd_pos	include/sys/fs.h	/^	int		fd_pos;		\/**< Current position for R\/W. *\/$/;"	m	struct:file_desc	typeref:typename:int
fdesc_inode_map	fs/disklog.c	/^	struct fdesc_inode_map {$/;"	s	function:dump_fd_graph	file:
features	include/sys/hd.h	/^	u8	features;$/;"	m	struct:hd_cmd	typeref:typename:u8
file_desc	include/sys/fs.h	/^struct file_desc {$/;"	s
filp	fs/disklog.c	/^		int filp; \/* idx of proc_table[pid].filp[] *\/$/;"	m	struct:dump_fd_graph::proc_fdesc_map	typeref:typename:int	file:
filp	include/sys/proc.h	/^	struct file_desc * filp[NR_FILES];$/;"	m	struct:proc	typeref:struct:file_desc * []
final	command/Makefile	/^final : all clean$/;"	t
flags	include/sys/protect.h	/^	u32	flags;$/;"	m	struct:tss	typeref:typename:u32
flush	kernel/console.c	/^PRIVATE void flush(CONSOLE *con)$/;"	f	typeref:typename:PRIVATE void
fork	lib/fork.c	/^PUBLIC int fork()$/;"	f	typeref:typename:PUBLIC int
found	boot/hdboot.asm	/^.found:$/;"	l
found	boot/hdldr.asm	/^.found:$/;"	l
free_mem	mm/main.c	/^PUBLIC int free_mem(int pid)$/;"	f	typeref:typename:PUBLIC int
fs	include/sys/proc.h	/^	u32	fs;		\/* ┃						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
fs	include/sys/protect.h	/^	u32	fs;$/;"	m	struct:tss	typeref:typename:u32
fs/disklog.o	Makefile	/^fs\/disklog.o: fs\/disklog.c$/;"	t
fs/link.o	Makefile	/^fs\/link.o: fs\/link.c$/;"	t
fs/main.o	Makefile	/^fs\/main.o: fs\/main.c$/;"	t
fs/open.o	Makefile	/^fs\/open.o: fs\/open.c$/;"	t
fs/read_write.o	Makefile	/^fs\/read_write.o: fs\/read_write.c$/;"	t
fs_exit	fs/main.c	/^PRIVATE int fs_exit()$/;"	f	typeref:typename:PRIVATE int
fs_fork	fs/main.c	/^PRIVATE int fs_fork()$/;"	f	typeref:typename:PRIVATE int
fs_msg	include/sys/global.h	/^EXTERN	MESSAGE			fs_msg;$/;"	v	typeref:typename:EXTERN MESSAGE
fsbuf	kernel/global.c	/^PUBLIC u8 *fsbuf = (u8 *)0x600000;$/;"	v	typeref:typename:PUBLIC u8 *
gate	include/sys/protect.h	/^struct gate$/;"	s
gdt	include/sys/global.h	/^EXTERN	struct descriptor	gdt[GDT_SIZE];$/;"	v	typeref:struct:descriptor[]
gdt_ptr	include/sys/global.h	/^EXTERN	u8			gdt_ptr[6];	\/* 0~15:Limit  16~47:Base *\/$/;"	v	typeref:typename:EXTERN u8[6]
general_protection	kernel/kernel.asm	/^general_protection:$/;"	l
get_boot_params	kernel/klib.c	/^PUBLIC void get_boot_params(struct boot_params *pbp)$/;"	f	typeref:typename:PUBLIC void
get_byte_from_kb_buf	kernel/keyboard.c	/^PRIVATE u8 get_byte_from_kb_buf()$/;"	f	typeref:typename:PRIVATE u8
get_inode	boot/hdboot.asm	/^get_inode:$/;"	l
get_inode	boot/hdldr.asm	/^get_inode:$/;"	l
get_inode	fs/main.c	/^PUBLIC struct inode *get_inode(int dev, int num)$/;"	f	typeref:typename:PUBLIC struct inode *
get_kernel_map	kernel/klib.c	/^PUBLIC int get_kernel_map(unsigned int *b, unsigned int *l)$/;"	f	typeref:typename:PUBLIC int
get_part_table	kernel/hd.c	/^PRIVATE void get_part_table(int drive, int sect_nr, struct part_ent *entry)$/;"	f	typeref:typename:PRIVATE void
get_rtc_time	kernel/systask.c	/^PRIVATE u32 get_rtc_time(struct time *t)$/;"	f	typeref:typename:PRIVATE u32
get_super_block	fs/main.c	/^PUBLIC struct super_block *get_super_block(int dev)$/;"	f	typeref:typename:PUBLIC struct super_block *
get_ticks	kernel/main.c	/^PUBLIC int get_ticks()$/;"	f	typeref:typename:PUBLIC int
getpid	lib/getpid.c	/^PUBLIC int getpid()$/;"	f	typeref:typename:PUBLIC int
gid	kernel/main.c	/^	char gid[8]; \/* 116 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[8]	file:
glitter	kernel/kliba.asm	/^glitter:$/;"	l
glitter_str	kernel/kliba.asm	/^.glitter_str:	db	'-\\|\/'$/;"	d
global	command/start.asm	/^global _start$/;"	l
global	kernel/kernel.asm	/^global	bounds_check$/;"	l
global	kernel/kernel.asm	/^global	breakpoint_exception$/;"	l
global	kernel/kernel.asm	/^global	copr_error$/;"	l
global	kernel/kernel.asm	/^global	copr_not_available$/;"	l
global	kernel/kernel.asm	/^global	copr_seg_overrun$/;"	l
global	kernel/kernel.asm	/^global	divide_error$/;"	l
global	kernel/kernel.asm	/^global	double_fault$/;"	l
global	kernel/kernel.asm	/^global	general_protection$/;"	l
global	kernel/kernel.asm	/^global	hwint00$/;"	l
global	kernel/kernel.asm	/^global	hwint01$/;"	l
global	kernel/kernel.asm	/^global	hwint02$/;"	l
global	kernel/kernel.asm	/^global	hwint03$/;"	l
global	kernel/kernel.asm	/^global	hwint04$/;"	l
global	kernel/kernel.asm	/^global	hwint05$/;"	l
global	kernel/kernel.asm	/^global	hwint06$/;"	l
global	kernel/kernel.asm	/^global	hwint07$/;"	l
global	kernel/kernel.asm	/^global	hwint08$/;"	l
global	kernel/kernel.asm	/^global	hwint09$/;"	l
global	kernel/kernel.asm	/^global	hwint10$/;"	l
global	kernel/kernel.asm	/^global	hwint11$/;"	l
global	kernel/kernel.asm	/^global	hwint12$/;"	l
global	kernel/kernel.asm	/^global	hwint13$/;"	l
global	kernel/kernel.asm	/^global	hwint14$/;"	l
global	kernel/kernel.asm	/^global	hwint15$/;"	l
global	kernel/kernel.asm	/^global	inval_opcode$/;"	l
global	kernel/kernel.asm	/^global	inval_tss$/;"	l
global	kernel/kernel.asm	/^global	nmi$/;"	l
global	kernel/kernel.asm	/^global	overflow$/;"	l
global	kernel/kernel.asm	/^global	page_fault$/;"	l
global	kernel/kernel.asm	/^global	segment_not_present$/;"	l
global	kernel/kernel.asm	/^global	single_step_exception$/;"	l
global	kernel/kernel.asm	/^global	stack_exception$/;"	l
global	kernel/kernel.asm	/^global _start	; 导出 _start$/;"	l
global	kernel/kernel.asm	/^global restart$/;"	l
global	kernel/kernel.asm	/^global sys_call$/;"	l
global	kernel/kliba.asm	/^global	disable_int$/;"	l
global	kernel/kliba.asm	/^global	disable_irq$/;"	l
global	kernel/kliba.asm	/^global	disp_color_str$/;"	l
global	kernel/kliba.asm	/^global	disp_str$/;"	l
global	kernel/kliba.asm	/^global	enable_int$/;"	l
global	kernel/kliba.asm	/^global	enable_irq$/;"	l
global	kernel/kliba.asm	/^global	glitter$/;"	l
global	kernel/kliba.asm	/^global	in_byte$/;"	l
global	kernel/kliba.asm	/^global	out_byte$/;"	l
global	kernel/kliba.asm	/^global	port_read$/;"	l
global	kernel/kliba.asm	/^global	port_write$/;"	l
global	lib/string.asm	/^global	memcpy$/;"	l
global	lib/string.asm	/^global	memset$/;"	l
global	lib/string.asm	/^global  strcpy$/;"	l
global	lib/string.asm	/^global  strlen$/;"	l
global	lib/syscall.asm	/^global	printx$/;"	l
global	lib/syscall.asm	/^global	sendrec$/;"	l
gname	kernel/main.c	/^	char gname[32]; \/* 297 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[32]	file:
gs	include/sys/proc.h	/^	u32	gs;		\/* ┓						│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
gs	include/sys/protect.h	/^	u32	gs;$/;"	m	struct:tss	typeref:typename:u32
has_int_msg	include/sys/proc.h	/^	int has_int_msg;           \/**$/;"	m	struct:proc	typeref:typename:int
hd_close	kernel/hd.c	/^PRIVATE void hd_close(int device)$/;"	f	typeref:typename:PRIVATE void
hd_cmd	include/sys/hd.h	/^struct hd_cmd {$/;"	s
hd_cmd_out	kernel/hd.c	/^PRIVATE void hd_cmd_out(struct hd_cmd *cmd)$/;"	f	typeref:typename:PRIVATE void
hd_handler	kernel/hd.c	/^PUBLIC void hd_handler(int irq)$/;"	f	typeref:typename:PUBLIC void
hd_identify	kernel/hd.c	/^PRIVATE void hd_identify(int drive)$/;"	f	typeref:typename:PRIVATE void
hd_info	include/sys/hd.h	/^struct hd_info$/;"	s
hd_info	kernel/hd.c	/^PRIVATE struct hd_info hd_info[1];$/;"	v	typeref:struct:hd_info[1]
hd_ioctl	kernel/hd.c	/^PRIVATE void hd_ioctl(MESSAGE *p)$/;"	f	typeref:typename:PRIVATE void
hd_open	kernel/hd.c	/^PRIVATE void hd_open(int device)$/;"	f	typeref:typename:PRIVATE void
hd_rdwt	kernel/hd.c	/^PRIVATE void hd_rdwt(MESSAGE *p)$/;"	f	typeref:typename:PRIVATE void
hd_status	kernel/hd.c	/^PRIVATE u8 hd_status;$/;"	v	typeref:typename:PRIVATE u8
hdbuf	kernel/hd.c	/^PRIVATE u8 hdbuf[SECTOR_SIZE * 2];$/;"	v	typeref:typename:PRIVATE u8[]
hour	include/stdio.h	/^	u32 hour;$/;"	m	struct:time	typeref:typename:u32
hwint00	kernel/kernel.asm	/^hwint00:		; Interrupt routine for irq 0 (the clock).$/;"	l
hwint01	kernel/kernel.asm	/^hwint01:		; Interrupt routine for irq 1 (keyboard)$/;"	l
hwint02	kernel/kernel.asm	/^hwint02:		; Interrupt routine for irq 2 (cascade!)$/;"	l
hwint03	kernel/kernel.asm	/^hwint03:		; Interrupt routine for irq 3 (second serial)$/;"	l
hwint04	kernel/kernel.asm	/^hwint04:		; Interrupt routine for irq 4 (first serial)$/;"	l
hwint05	kernel/kernel.asm	/^hwint05:		; Interrupt routine for irq 5 (XT winchester)$/;"	l
hwint06	kernel/kernel.asm	/^hwint06:		; Interrupt routine for irq 6 (floppy)$/;"	l
hwint07	kernel/kernel.asm	/^hwint07:		; Interrupt routine for irq 7 (printer)$/;"	l
hwint08	kernel/kernel.asm	/^hwint08:		; Interrupt routine for irq 8 (realtime clock).$/;"	l
hwint09	kernel/kernel.asm	/^hwint09:		; Interrupt routine for irq 9 (irq 2 redirected)$/;"	l
hwint10	kernel/kernel.asm	/^hwint10:		; Interrupt routine for irq 10$/;"	l
hwint11	kernel/kernel.asm	/^hwint11:		; Interrupt routine for irq 11$/;"	l
hwint12	kernel/kernel.asm	/^hwint12:		; Interrupt routine for irq 12$/;"	l
hwint13	kernel/kernel.asm	/^hwint13:		; Interrupt routine for irq 13 (FPU exception)$/;"	l
hwint14	kernel/kernel.asm	/^hwint14:		; Interrupt routine for irq 14 (AT winchester)$/;"	l
hwint15	kernel/kernel.asm	/^hwint15:		; Interrupt routine for irq 15$/;"	l
i2a	lib/vsprintf.c	/^PRIVATE char *i2a(int val, int base, char **ps)$/;"	f	typeref:typename:PRIVATE char *
i_cnt	include/sys/fs.h	/^	int	i_cnt;		\/**< How many procs share this inode  *\/$/;"	m	struct:inode	typeref:typename:int
i_dev	include/sys/fs.h	/^	int	i_dev;$/;"	m	struct:inode	typeref:typename:int
i_mode	include/sys/fs.h	/^	u32	i_mode;		\/**< Accsess mode *\/$/;"	m	struct:inode	typeref:typename:u32
i_nr_sects	include/sys/fs.h	/^	u32	i_nr_sects;	\/**< How many sectors the file occupies *\/$/;"	m	struct:inode	typeref:typename:u32
i_num	include/sys/fs.h	/^	int	i_num;		\/**< inode nr.  *\/$/;"	m	struct:inode	typeref:typename:int
i_size	include/sys/fs.h	/^	u32	i_size;		\/**< File size *\/$/;"	m	struct:inode	typeref:typename:u32
i_start_sect	include/sys/fs.h	/^	u32	i_start_sect;	\/**< The first sector of the data *\/$/;"	m	struct:inode	typeref:typename:u32
ibuf	include/sys/tty.h	/^	u32	ibuf[TTY_IN_BYTES];	\/* TTY input buffer *\/$/;"	m	struct:s_tty	typeref:typename:u32[]
ibuf_cnt	include/sys/tty.h	/^	int	ibuf_cnt;		\/* how many *\/$/;"	m	struct:s_tty	typeref:typename:int
ibuf_head	include/sys/tty.h	/^	u32*	ibuf_head;		\/* the next free slot *\/$/;"	m	struct:s_tty	typeref:typename:u32 *
ibuf_tail	include/sys/tty.h	/^	u32*	ibuf_tail;		\/* the val to be processed by TTY *\/$/;"	m	struct:s_tty	typeref:typename:u32 *
iden_info_ascii	kernel/hd.c	/^	struct iden_info_ascii {$/;"	s	function:print_identify_info	file:
idt	include/sys/global.h	/^EXTERN	struct gate		idt[IDT_SIZE];$/;"	v	typeref:struct:gate[]
idt_ptr	include/sys/global.h	/^EXTERN	u8			idt_ptr[6];	\/* 0~15:Limit  16~47:Base *\/$/;"	v	typeref:typename:EXTERN u8[6]
idx	kernel/hd.c	/^		int idx;$/;"	m	struct:print_identify_info::iden_info_ascii	typeref:typename:int	file:
image	Makefile	/^image : realclean everything clean buildimg$/;"	t
in_byte	kernel/kliba.asm	/^in_byte:$/;"	l
in_process	kernel/tty.c	/^PUBLIC void in_process(TTY *tty, u32 key)$/;"	f	typeref:typename:PUBLIC void
inc	boot/boot.asm	/^	inc	di$/;"	d
inc	boot/loader.asm	/^	inc	di$/;"	d
inform_int	kernel/proc.c	/^PUBLIC void inform_int(int task_nr)$/;"	f	typeref:typename:PUBLIC void
init_8259A	kernel/i8259.c	/^PUBLIC void init_8259A()$/;"	f	typeref:typename:PUBLIC void
init_clock	kernel/clock.c	/^PUBLIC void init_clock()$/;"	f	typeref:typename:PUBLIC void
init_desc	kernel/protect.c	/^PUBLIC void init_desc(struct descriptor *p_desc, u32 base, u32 limit,$/;"	f	typeref:typename:PUBLIC void
init_fs	fs/main.c	/^PRIVATE void init_fs()$/;"	f	typeref:typename:PRIVATE void
init_hd	kernel/hd.c	/^PRIVATE void init_hd()$/;"	f	typeref:typename:PRIVATE void
init_idt_desc	kernel/protect.c	/^PUBLIC void init_idt_desc(unsigned char vector, u8 desc_type,$/;"	f	typeref:typename:PUBLIC void
init_keyboard	kernel/keyboard.c	/^PUBLIC void init_keyboard()$/;"	f	typeref:typename:PUBLIC void
init_mm	mm/main.c	/^PRIVATE void init_mm()$/;"	f	typeref:typename:PRIVATE void
init_prot	kernel/protect.c	/^PUBLIC void init_prot()$/;"	f	typeref:typename:PUBLIC void
init_screen	kernel/console.c	/^PUBLIC void init_screen(TTY *tty)$/;"	f	typeref:typename:PUBLIC void
init_tty	kernel/tty.c	/^PRIVATE void init_tty(TTY *tty)$/;"	f	typeref:typename:PRIVATE void
initial_eip	include/sys/proc.h	/^	task_f	initial_eip;$/;"	m	struct:task	typeref:typename:task_f
inode	fs/disklog.c	/^		int inode; \/* idx of inode_table[] *\/$/;"	m	struct:dump_fd_graph::fdesc_inode_map	typeref:typename:int	file:
inode	include/sys/fs.h	/^struct inode {$/;"	s
inode_isize_off	include/sys/fs.h	/^	u32	inode_isize_off;  \/**< Offset of `struct inode::i_size' *\/$/;"	m	struct:super_block	typeref:typename:u32
inode_nr	include/sys/fs.h	/^	int	inode_nr;		\/**< inode nr. *\/$/;"	m	struct:dir_entry	typeref:typename:int
inode_size	include/sys/fs.h	/^	u32	inode_size;       \/**< INODE_SIZE *\/$/;"	m	struct:super_block	typeref:typename:u32
inode_start_off	include/sys/fs.h	/^	u32	inode_start_off;  \/**< Offset of `struct inode::i_start_sect' *\/$/;"	m	struct:super_block	typeref:typename:u32
inode_table	include/sys/global.h	/^EXTERN	struct inode		inode_table[NR_INODE];$/;"	v	typeref:struct:inode[]
install	command/Makefile	/^install : all clean$/;"	t
int_handler	include/type.h	/^typedef	void	(*int_handler)	();$/;"	t	typeref:typename:void (*)()
interrupt_wait	kernel/hd.c	/^PRIVATE void interrupt_wait()$/;"	f	typeref:typename:PRIVATE void
inval_opcode	kernel/kernel.asm	/^inval_opcode:$/;"	l
inval_tss	kernel/kernel.asm	/^inval_tss:$/;"	l
iobase	include/sys/protect.h	/^	u16	iobase;	\/* I\/O位图基址大于或等于TSS段界限，就表示没有I\/O许可位图 */;"	m	struct:tss	typeref:typename:u16
irq_handler	include/type.h	/^typedef	void	(*irq_handler)	(int irq);$/;"	t	typeref:typename:void (*)(int irq)
irq_table	kernel/global.c	/^PUBLIC irq_handler irq_table[NR_IRQ];$/;"	v	typeref:typename:PUBLIC irq_handler[]
is_current_console	kernel/console.c	/^PUBLIC int is_current_console(CONSOLE *con)$/;"	f	typeref:typename:PUBLIC int
is_full	include/sys/console.h	/^	int		is_full;$/;"	m	struct:s_console	typeref:typename:int
is_special	include/sys/const.h	/^#define	is_special(/;"	d
itoa	kernel/klib.c	/^itoa(char *str,$/;"	f	typeref:typename:PUBLIC char *
k_reenter	include/sys/global.h	/^EXTERN	u32	k_reenter;$/;"	v	typeref:typename:EXTERN u32
kb_ack	kernel/keyboard.c	/^PRIVATE void kb_ack()$/;"	f	typeref:typename:PRIVATE void
kb_in	kernel/keyboard.c	/^PRIVATE struct kb_inbuf kb_in;$/;"	v	typeref:struct:kb_inbuf
kb_inbuf	include/sys/keyboard.h	/^struct kb_inbuf {$/;"	s
kb_wait	kernel/keyboard.c	/^PRIVATE void kb_wait() \/* 等待 8042 的输入缓冲区空 *\/$/;"	f	typeref:typename:PRIVATE void
kernel.bin	command/Makefile	/^kernel.bin :$/;"	t
kernel/clock.o	Makefile	/^kernel\/clock.o: kernel\/clock.c$/;"	t
kernel/console.o	Makefile	/^kernel\/console.o: kernel\/console.c$/;"	t
kernel/global.o	Makefile	/^kernel\/global.o: kernel\/global.c$/;"	t
kernel/hd.o	Makefile	/^kernel\/hd.o: kernel\/hd.c$/;"	t
kernel/i8259.o	Makefile	/^kernel\/i8259.o: kernel\/i8259.c$/;"	t
kernel/kernel.o	Makefile	/^kernel\/kernel.o : kernel\/kernel.asm$/;"	t
kernel/keyboard.o	Makefile	/^kernel\/keyboard.o: kernel\/keyboard.c$/;"	t
kernel/klib.o	Makefile	/^kernel\/klib.o: kernel\/klib.c$/;"	t
kernel/kliba.o	Makefile	/^kernel\/kliba.o : kernel\/kliba.asm$/;"	t
kernel/main.o	Makefile	/^kernel\/main.o: kernel\/main.c$/;"	t
kernel/proc.o	Makefile	/^kernel\/proc.o: kernel\/proc.c$/;"	t
kernel/protect.o	Makefile	/^kernel\/protect.o: kernel\/protect.c$/;"	t
kernel/start.o	Makefile	/^kernel\/start.o: kernel\/start.c$/;"	t
kernel/systask.o	Makefile	/^kernel\/systask.o: kernel\/systask.c$/;"	t
kernel/tty.o	Makefile	/^kernel\/tty.o: kernel\/tty.c$/;"	t
kernel_esp	include/sys/proc.h	/^	u32	kernel_esp;	\/* <- 'popad' will ignore it			│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
kernel_file	include/type.h	/^	unsigned char *	kernel_file;	\/* addr of kernel file *\/$/;"	m	struct:boot_params	typeref:typename:unsigned char *
kernel_main	kernel/main.c	/^PUBLIC int kernel_main()$/;"	f	typeref:typename:PUBLIC int
key_pressed	include/sys/global.h	/^EXTERN	int	key_pressed; \/**$/;"	v	typeref:typename:EXTERN int
keyboard_handler	kernel/keyboard.c	/^PUBLIC void keyboard_handler(int irq)$/;"	f	typeref:typename:PUBLIC void
keyboard_read	kernel/keyboard.c	/^PUBLIC void keyboard_read(TTY *tty)$/;"	f	typeref:typename:PUBLIC void
keymap	include/sys/keymap.h	/^u32 keymap[NR_SCAN_CODES * MAP_COLS] = {$/;"	v	typeref:typename:u32[]
kill	command/Makefile	/^kill : kill.o start.o $(LIB)$/;"	t
kill	lib/kill.c	/^PUBLIC int kill(int pid, int state)$/;"	f	typeref:typename:PUBLIC int
kill.o	command/Makefile	/^kill.o: kill.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
lba_addr	boot/hdldr.asm	/^lba_addr:		dd	0		; [ 8] Starting LBA address. Low  32-bits.$/;"	d
lba_high	include/sys/hd.h	/^	u8	lba_high;$/;"	m	struct:hd_cmd	typeref:typename:u8
lba_low	include/sys/hd.h	/^	u8	lba_low;$/;"	m	struct:hd_cmd	typeref:typename:u8
lba_mid	include/sys/hd.h	/^	u8	lba_mid;$/;"	m	struct:hd_cmd	typeref:typename:u8
ldt	include/sys/protect.h	/^	u32	ldt;$/;"	m	struct:tss	typeref:typename:u32
ldt_seg_linear	kernel/proc.c	/^PUBLIC int ldt_seg_linear(struct proc *p, int idx)$/;"	f	typeref:typename:PUBLIC int
ldt_sel	include/sys/proc.h	/^	u16 ldt_sel;               \/* gdt selector giving ldt base and limit *\/$/;"	m	struct:proc	typeref:typename:u16
ldts	include/sys/proc.h	/^	struct descriptor ldts[LDT_SIZE]; \/* local descs for code and data *\/$/;"	m	struct:proc	typeref:struct:descriptor[]
len	kernel/hd.c	/^		int len;$/;"	m	struct:print_identify_info::iden_info_ascii	typeref:typename:int	file:
lib/close.o	Makefile	/^lib\/close.o: lib\/close.c$/;"	t
lib/exec.o	Makefile	/^lib\/exec.o: lib\/exec.c$/;"	t
lib/exit.o	Makefile	/^lib\/exit.o: lib\/exit.c$/;"	t
lib/fork.o	Makefile	/^lib\/fork.o: lib\/fork.c$/;"	t
lib/getpid.o	Makefile	/^lib\/getpid.o: lib\/getpid.c$/;"	t
lib/kill.o	Makefile	/^lib\/kill.o: lib\/kill.c$/;"	t
lib/ls.o	Makefile	/^lib\/ls.o: lib\/ls.c$/;"	t
lib/lseek.o	Makefile	/^lib\/lseek.o: lib\/lseek.c$/;"	t
lib/misc.o	Makefile	/^lib\/misc.o: lib\/misc.c$/;"	t
lib/open.o	Makefile	/^lib\/open.o: lib\/open.c$/;"	t
lib/printf.o	Makefile	/^lib\/printf.o: lib\/printf.c$/;"	t
lib/ps.o	Makefile	/^lib\/ps.o: lib\/ps.c$/;"	t
lib/read.o	Makefile	/^lib\/read.o: lib\/read.c$/;"	t
lib/stat.o	Makefile	/^lib\/stat.o: lib\/stat.c$/;"	t
lib/string.o	Makefile	/^lib\/string.o : lib\/string.asm$/;"	t
lib/syscall.o	Makefile	/^lib\/syscall.o : lib\/syscall.asm$/;"	t
lib/syslog.o	Makefile	/^lib\/syslog.o: lib\/syslog.c$/;"	t
lib/unlink.o	Makefile	/^lib\/unlink.o: lib\/unlink.c$/;"	t
lib/vsprintf.o	Makefile	/^lib\/vsprintf.o: lib\/vsprintf.c$/;"	t
lib/wait.o	Makefile	/^lib\/wait.o: lib\/wait.c$/;"	t
lib/write.o	Makefile	/^lib\/write.o: lib\/write.c$/;"	t
limit_high_attr2	include/sys/protect.h	/^	u8	limit_high_attr2;	\/* G(1) D(1) 0(1) AVL(1) LimitHigh(4) *\/$/;"	m	struct:descriptor	typeref:typename:u8
limit_low	include/sys/protect.h	/^	u16	limit_low;		\/* Limit *\/$/;"	m	struct:descriptor	typeref:typename:u16
line_width	kernel/kliba.asm	/^.line_width	equ	80$/;"	d
linkname	kernel/main.c	/^	char linkname[100]; \/* 157 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[100]	file:
load_kernel	boot/hdldr.asm	/^load_kernel:$/;"	l
load_loader	boot/hdboot.asm	/^load_loader:$/;"	l
logbuf	kernel/global.c	/^PUBLIC char *logbuf = (char *)0x800000;$/;"	v	typeref:typename:PUBLIC char *
logdiskbuf	kernel/global.c	/^PUBLIC char *logdiskbuf = (char *)0x900000;$/;"	v	typeref:typename:PUBLIC char *
logical	include/sys/hd.h	/^	struct part_info	logical[NR_SUB_PER_DRIVE];$/;"	m	struct:hd_info	typeref:struct:part_info[]
loop	boot/hdldr.asm	/^.loop:					;{$/;"	l
loop	boot/loader.asm	/^.loop:					;{$/;"	l
ls	command/Makefile	/^ls : ls.o start.o $(LIB)$/;"	t
ls	lib/ls.c	/^PUBLIC void ls(char *dst)$/;"	f	typeref:typename:PUBLIC void
ls.o	command/Makefile	/^ls.o: ls.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
lseek	lib/lseek.c	/^PUBLIC int lseek(int fd, int offset, int whence)$/;"	f	typeref:typename:PUBLIC int
m1	include/type.h	/^		struct mess1 m1;$/;"	m	union:__anon6e8aff300108::__anon6e8aff30020a	typeref:struct:mess1
m1i1	include/type.h	/^	int m1i1;$/;"	m	struct:mess1	typeref:typename:int
m1i2	include/type.h	/^	int m1i2;$/;"	m	struct:mess1	typeref:typename:int
m1i3	include/type.h	/^	int m1i3;$/;"	m	struct:mess1	typeref:typename:int
m1i4	include/type.h	/^	int m1i4;$/;"	m	struct:mess1	typeref:typename:int
m2	include/type.h	/^		struct mess2 m2;$/;"	m	union:__anon6e8aff300108::__anon6e8aff30020a	typeref:struct:mess2
m2p1	include/type.h	/^	void* m2p1;$/;"	m	struct:mess2	typeref:typename:void *
m2p2	include/type.h	/^	void* m2p2;$/;"	m	struct:mess2	typeref:typename:void *
m2p3	include/type.h	/^	void* m2p3;$/;"	m	struct:mess2	typeref:typename:void *
m2p4	include/type.h	/^	void* m2p4;$/;"	m	struct:mess2	typeref:typename:void *
m3	include/type.h	/^		struct mess3 m3;$/;"	m	union:__anon6e8aff300108::__anon6e8aff30020a	typeref:struct:mess3
m3i1	include/type.h	/^	int	m3i1;$/;"	m	struct:mess3	typeref:typename:int
m3i2	include/type.h	/^	int	m3i2;$/;"	m	struct:mess3	typeref:typename:int
m3i3	include/type.h	/^	int	m3i3;$/;"	m	struct:mess3	typeref:typename:int
m3i4	include/type.h	/^	int	m3i4;$/;"	m	struct:mess3	typeref:typename:int
m3l1	include/type.h	/^	u64	m3l1;$/;"	m	struct:mess3	typeref:typename:u64
m3l2	include/type.h	/^	u64	m3l2;$/;"	m	struct:mess3	typeref:typename:u64
m3p1	include/type.h	/^	void*	m3p1;$/;"	m	struct:mess3	typeref:typename:void *
m3p2	include/type.h	/^	void*	m3p2;$/;"	m	struct:mess3	typeref:typename:void *
magic	include/sys/fs.h	/^	u32	magic;		  \/**< Magic number *\/$/;"	m	struct:super_block	typeref:typename:u32
magic	kernel/main.c	/^	char magic[6]; \/* 257 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[6]	file:
main	command/cat.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	command/echo.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	command/edit.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	command/kill.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	command/ls.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	command/ps.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	command/pwd.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	command/rm.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	command/stat.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	command/touch.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
makelinear	include/sys/protect.h	/^#define makelinear(/;"	d
max	include/sys/const.h	/^#define	max(/;"	d
mem_size	include/type.h	/^	int		mem_size;	\/* memory size *\/$/;"	m	struct:boot_params	typeref:typename:int
memcmp	lib/misc.c	/^PUBLIC int memcmp(const void *s1, const void *s2, int n)$/;"	f	typeref:typename:PUBLIC int
memcpy	lib/string.asm	/^memcpy:$/;"	l
memory_size	include/sys/global.h	/^EXTERN	int			memory_size;$/;"	v	typeref:typename:EXTERN int
memset	lib/string.asm	/^memset:$/;"	l
mess1	include/type.h	/^struct mess1 {$/;"	s
mess2	include/type.h	/^struct mess2 {$/;"	s
mess3	include/type.h	/^struct mess3 {$/;"	s
milli_delay	kernel/clock.c	/^PUBLIC void milli_delay(int milli_sec)$/;"	f	typeref:typename:PUBLIC void
min	include/sys/const.h	/^#define	min(/;"	d
minute	include/stdio.h	/^	u32 minute;$/;"	m	struct:time	typeref:typename:u32
mkfs	fs/main.c	/^PRIVATE void mkfs()$/;"	f	typeref:typename:PRIVATE void
mm/exec.o	Makefile	/^mm\/exec.o: mm\/exec.c$/;"	t
mm/forkexit.o	Makefile	/^mm\/forkexit.o: mm\/forkexit.c$/;"	t
mm/main.o	Makefile	/^mm\/main.o: mm\/main.c$/;"	t
mm_msg	include/sys/global.h	/^EXTERN	MESSAGE			mm_msg;$/;"	v	typeref:typename:EXTERN MESSAGE
mmbuf	kernel/global.c	/^PUBLIC u8 *mmbuf = (u8 *)0x700000;$/;"	v	typeref:typename:PUBLIC u8 *
mode	kernel/main.c	/^	char mode[8]; \/* 100 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[8]	file:
month	include/stdio.h	/^	u32 month;$/;"	m	struct:time	typeref:typename:u32
mov	boot/boot.asm	/^	mov	dh, 0			; "Booting  "$/;"	d
mov	boot/boot.asm	/^	mov	dh, 1			; "Ready."$/;"	d
mov	boot/boot.asm	/^	mov	dh, 2			; "No LOADER."$/;"	d
mov	boot/boot.asm	/^	mov	dh, al			; dh <- y$/;"	d
mov	boot/boot.asm	/^	mov	di, LOADER_OFF		; es:di -> LOADER_SEG:0100 = LOADER_SEG*10h+100$/;"	d
mov	boot/boot.asm	/^	mov	dl, 0$/;"	d
mov	boot/boot.asm	/^	mov	dl, [BS_DrvNum]		; 驱动器号 (0 表示 A 盘)$/;"	d
mov	boot/boot.asm	/^	mov	ds, ax$/;"	d
mov	boot/boot.asm	/^	mov	dx, 0184fh		; 右下角: (80, 50)$/;"	d
mov	boot/boot.asm	/^	mov	dx, 10h$/;"	d
mov	boot/boot.asm	/^	mov	dx, RootDirSectors$/;"	d
mov	boot/hdboot.asm	/^	mov	dh, 0			; "Booting  "$/;"	d
mov	boot/hdboot.asm	/^	mov	dh, 1$/;"	d
mov	boot/hdboot.asm	/^	mov	dh, 2$/;"	d
mov	boot/hdboot.asm	/^	mov	dh, 3			; "Error 0  "$/;"	d
mov	boot/hdboot.asm	/^	mov	dl, 0$/;"	d
mov	boot/hdboot.asm	/^	mov	dl, 0x80$/;"	d
mov	boot/hdboot.asm	/^	mov	ds, ax$/;"	d
mov	boot/hdboot.asm	/^	mov	dx, 0x184f		; 右下角: (80, 50)$/;"	d
mov	boot/hdboot.asm	/^	mov	dx, SECT_BUF_SIZE$/;"	d
mov	boot/hdldr.asm	/^	mov	dh, 0			; "Loading  "$/;"	d
mov	boot/hdldr.asm	/^	mov	dh, 2$/;"	d
mov	boot/hdldr.asm	/^	mov	dh, 3$/;"	d
mov	boot/hdldr.asm	/^	mov	dh, 5			; "Error 0  "$/;"	d
mov	boot/hdldr.asm	/^	mov	di, _MemChkBuf		; es:di 指向一个地址范围描述符结构（Address Range Descriptor /;"	d
mov	boot/hdldr.asm	/^	mov	dl, 0$/;"	d
mov	boot/hdldr.asm	/^	mov	dl, 0x80$/;"	d
mov	boot/hdldr.asm	/^	mov	dl, al$/;"	d
mov	boot/hdldr.asm	/^	mov	ds, ax$/;"	d
mov	boot/hdldr.asm	/^	mov	dx, 0x184f		; 右下角: (80, 50)$/;"	d
mov	boot/loader.asm	/^	mov	dh, 0			; "Loading  "$/;"	d
mov	boot/loader.asm	/^	mov	dh, 2			; "Ready."$/;"	d
mov	boot/loader.asm	/^	mov	dh, 3			; "No KERNEL."$/;"	d
mov	boot/loader.asm	/^	mov	dh, 4			; "Too Large"$/;"	d
mov	boot/loader.asm	/^	mov	dh, al			; dh <- y$/;"	d
mov	boot/loader.asm	/^	mov	di, KERNEL_FILE_OFF	; es:di -> KERNEL_FILE_SEG:???? = KERNEL_FILE_SEG*10h+????$/;"	d
mov	boot/loader.asm	/^	mov	di, _MemChkBuf		; es:di 指向一个地址范围描述符结构（Address Range Descriptor /;"	d
mov	boot/loader.asm	/^	mov	dl, 0$/;"	d
mov	boot/loader.asm	/^	mov	dl, [BS_DrvNum]		; 驱动器号 (0 表示 A 盘)$/;"	d
mov	boot/loader.asm	/^	mov	dl, al$/;"	d
mov	boot/loader.asm	/^	mov	ds, ax$/;"	d
mov	boot/loader.asm	/^	mov	dx, 03F2h$/;"	d
mov	boot/loader.asm	/^	mov	dx, 10h$/;"	d
mov	boot/loader.asm	/^	mov	dx, RootDirSectors$/;"	d
mov	boot/loader.asm	/^	mov     dx, 80h         ; DH = head number$/;"	d
mov	kernel/kernel.asm	/^	mov	ds, dx$/;"	d
mov	kernel/kernel.asm	/^	mov	dx, ss$/;"	d
mov	kernel/kliba.asm	/^	mov	dl, byte [eax + .glitter_str]$/;"	d
msg_receive	kernel/proc.c	/^PRIVATE int msg_receive(struct proc *current, int src, MESSAGE *m)$/;"	f	typeref:typename:PRIVATE int
msg_send	kernel/proc.c	/^PRIVATE int msg_send(struct proc *current, int dest, MESSAGE *m)$/;"	f	typeref:typename:PRIVATE int
msg_src_dst	fs/disklog.c	/^	struct msg_src_dst {$/;"	s	function:dump_fd_graph	file:
msgtype	include/sys/const.h	/^enum msgtype {$/;"	g
mtime	kernel/main.c	/^	char mtime[12]; \/* 136 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[12]	file:
mul	boot/boot.asm	/^	mul	dh$/;"	d
mul	boot/hdboot.asm	/^	mul	dh$/;"	d
mul	boot/hdldr.asm	/^	mul	dh$/;"	d
mul	boot/loader.asm	/^	mul	dh$/;"	d
n_1st_sect	include/sys/fs.h	/^	u32	n_1st_sect;	  \/**< Number of the 1st data sector *\/$/;"	m	struct:super_block	typeref:typename:u32
name	include/sys/fs.h	/^	char	name[MAX_FILENAME_LEN];	\/**< Filename *\/$/;"	m	struct:dir_entry	typeref:typename:char[]
name	include/sys/proc.h	/^	char	name[32];$/;"	m	struct:task	typeref:typename:char[32]
name	include/sys/proc.h	/^	char name[16];		   \/* name of the process *\/$/;"	m	struct:proc	typeref:typename:char[16]
name	kernel/main.c	/^	char name[100]; \/*   0 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[100]	file:
new_dir_entry	fs/open.c	/^PRIVATE void new_dir_entry(struct inode *dir_inode, int inode_nr,$/;"	f	typeref:typename:PRIVATE void
new_inode	fs/open.c	/^PRIVATE struct inode *new_inode(int dev, int inode_nr, int start_sect)$/;"	f	typeref:typename:PRIVATE struct inode *
next_sending	include/sys/proc.h	/^	struct proc * next_sending;\/**$/;"	m	struct:proc	typeref:struct:proc *
nmi	kernel/kernel.asm	/^nmi:$/;"	l
no_remainder	boot/hdldr.asm	/^.no_remainder:$/;"	l
no_remainder	boot/loader.asm	/^.no_remainder:$/;"	l
nop	Makefile	/^nop :$/;"	t
not_found	boot/hdboot.asm	/^.not_found:$/;"	l
not_found	boot/hdldr.asm	/^.not_found:$/;"	l
nr_imap_sects	include/sys/fs.h	/^	u32	nr_imap_sects;	  \/**< How many inode-map sectors *\/$/;"	m	struct:super_block	typeref:typename:u32
nr_inode_sects	include/sys/fs.h	/^	u32	nr_inode_sects;   \/**< How many inode sectors *\/$/;"	m	struct:super_block	typeref:typename:u32
nr_inodes	include/sys/fs.h	/^	u32	nr_inodes;	  \/**< How many inodes *\/$/;"	m	struct:super_block	typeref:typename:u32
nr_sects	include/sys/fs.h	/^	u32	nr_sects;	  \/**< How many sectors *\/$/;"	m	struct:super_block	typeref:typename:u32
nr_sects	include/sys/hd.h	/^	u32 nr_sects;		\/**$/;"	m	struct:part_ent	typeref:typename:u32
nr_smap_sects	include/sys/fs.h	/^	u32	nr_smap_sects;	  \/**< How many sector-map sectors *\/$/;"	m	struct:super_block	typeref:typename:u32
num_lock	kernel/keyboard.c	/^PRIVATE int num_lock; \/* Num Lock		*\/$/;"	v	typeref:typename:PRIVATE int
offset_high	include/sys/protect.h	/^	u16	offset_high;	\/* Offset High *\/$/;"	m	struct:gate	typeref:typename:u16
offset_low	include/sys/protect.h	/^	u16	offset_low;	\/* Offset Low *\/$/;"	m	struct:gate	typeref:typename:u16
open	lib/open.c	/^PUBLIC int open(const char *pathname, int flags)$/;"	f	typeref:typename:PUBLIC int
open_cnt	include/sys/hd.h	/^	int			open_cnt;$/;"	m	struct:hd_info	typeref:typename:int
org	boot/hdboot.asm	/^org  0x7c00			; bios always loads boot sector to 0000:7C00$/;"	l
org	boot/hdldr.asm	/^org  0100h$/;"	l
org	boot/loader.asm	/^org  0100h$/;"	l
orig	include/sys/console.h	/^	unsigned int	orig;	    \/* start addr of the console *\/$/;"	m	struct:s_console	typeref:typename:unsigned int
out	boot/loader.asm	/^	out	dx, al$/;"	d
out	kernel/kliba.asm	/^	out	dx, al$/;"	d
out_byte	kernel/kliba.asm	/^out_byte:$/;"	l
out_char	kernel/console.c	/^PUBLIC void out_char(CONSOLE *con, char ch)$/;"	f	typeref:typename:PUBLIC void
overflow	kernel/kernel.asm	/^overflow:$/;"	l
p_flags	include/sys/proc.h	/^	int  p_flags;              \/**$/;"	m	struct:proc	typeref:typename:int
p_head	include/sys/keyboard.h	/^	char*	p_head;			\/* 指向缓冲区中下一个空闲位置 *\/$/;"	m	struct:kb_inbuf	typeref:typename:char *
p_msg	include/sys/proc.h	/^	MESSAGE * p_msg;$/;"	m	struct:proc	typeref:typename:MESSAGE *
p_parent	include/sys/proc.h	/^	int p_parent; \/**< pid of parent process *\/$/;"	m	struct:proc	typeref:typename:int
p_proc_ready	include/sys/global.h	/^EXTERN	struct proc*	p_proc_ready;$/;"	v	typeref:struct:proc *
p_recvfrom	include/sys/proc.h	/^	int p_recvfrom;$/;"	m	struct:proc	typeref:typename:int
p_sendto	include/sys/proc.h	/^	int p_sendto;$/;"	m	struct:proc	typeref:typename:int
p_tail	include/sys/keyboard.h	/^	char*	p_tail;			\/* 指向键盘任务应处理的字节 *\/$/;"	m	struct:kb_inbuf	typeref:typename:char *
page_fault	kernel/kernel.asm	/^page_fault:$/;"	l
panic	kernel/main.c	/^PUBLIC void panic(const char *fmt, ...)$/;"	f	typeref:typename:PUBLIC void
part_ent	include/sys/hd.h	/^struct part_ent {$/;"	s
part_info	include/sys/hd.h	/^struct part_info {$/;"	s
partition	kernel/hd.c	/^PRIVATE void partition(int device, int style)$/;"	f	typeref:typename:PRIVATE void
pcaller	include/sys/global.h	/^EXTERN	struct proc *		pcaller;$/;"	v	typeref:struct:proc *
phys_copy	include/string.h	/^#define	phys_copy	/;"	d
phys_set	include/string.h	/^#define	phys_set	/;"	d
pid	fs/disklog.c	/^		int pid; \/* PID *\/$/;"	m	struct:dump_fd_graph::proc_fdesc_map	typeref:typename:int	file:
pid	fs/disklog.c	/^		int pid;$/;"	m	struct:dump_fd_graph::proc_parent_map	typeref:typename:int	file:
pop	boot/boot.asm	/^	pop	dx$/;"	d
pop	boot/loader.asm	/^	pop	dx$/;"	d
pop	kernel/kernel.asm	/^	pop	ds$/;"	d
port_read	kernel/kliba.asm	/^port_read:$/;"	l
port_write	kernel/kliba.asm	/^port_write:$/;"	l
posix_tar_header	kernel/main.c	/^struct posix_tar_header { \/* byte offset *\/$/;"	s	file:
ppid	fs/disklog.c	/^		int ppid;$/;"	m	struct:dump_fd_graph::proc_parent_map	typeref:typename:int	file:
prefix	kernel/main.c	/^	char prefix[155]; \/* 345 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[155]	file:
primary	include/sys/hd.h	/^	struct part_info	primary[NR_PRIM_PER_DRIVE];$/;"	m	struct:hd_info	typeref:struct:part_info[]
print_identify_info	kernel/hd.c	/^PRIVATE void print_identify_info(u16 *hdinfo)$/;"	f	typeref:typename:PRIVATE void
printf	lib/printf.c	/^PUBLIC int printf(const char *fmt, ...)$/;"	f	typeref:typename:PUBLIC int
printl	lib/printf.c	/^PUBLIC int printl(const char *fmt, ...)$/;"	f	typeref:typename:PUBLIC int
printusage	scripts/invalidate.hd	/^printusage(){$/;"	f
printx	lib/syscall.asm	/^printx:$/;"	l
priority	include/sys/proc.h	/^        int priority;$/;"	m	struct:proc	typeref:typename:int
proc	include/sys/proc.h	/^struct proc {$/;"	s
proc2pid	include/sys/proc.h	/^#define proc2pid(/;"	d
proc_fdesc_map	fs/disklog.c	/^	struct proc_fdesc_map {$/;"	s	function:dump_fd_graph	file:
proc_parent_map	fs/disklog.c	/^	struct proc_parent_map {$/;"	s	function:dump_fd_graph	file:
proc_table	kernel/global.c	/^PUBLIC struct proc proc_table[NR_TASKS + NR_PROCS];$/;"	v	typeref:struct:proc[]
ps	command/Makefile	/^ps : ps.o start.o $(LIB)$/;"	t
ps	lib/ps.c	/^PUBLIC void ps(char *dst)$/;"	f	typeref:typename:PUBLIC void
ps.o	command/Makefile	/^ps.o: ps.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
push	boot/boot.asm	/^	push	dx$/;"	d
push	boot/loader.asm	/^	push	dx$/;"	d
push	kernel/kernel.asm	/^        push    ds      ;  |$/;"	d
put_inode	fs/main.c	/^PUBLIC void put_inode(struct inode *pinode)$/;"	f	typeref:typename:PUBLIC void
put_irq_handler	kernel/i8259.c	/^PUBLIC void put_irq_handler(int irq, irq_handler handler)$/;"	f	typeref:typename:PUBLIC void
put_key	kernel/tty.c	/^PRIVATE void put_key(TTY *tty, u32 key)$/;"	f	typeref:typename:PRIVATE void
pwd	command/Makefile	/^pwd : pwd.o start.o $(LIB)$/;"	t
pwd.o	command/Makefile	/^pwd.o: pwd.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
q_sending	include/sys/proc.h	/^	struct proc * q_sending;   \/**$/;"	m	struct:proc	typeref:struct:proc *
read	lib/read.c	/^PUBLIC int read(int fd, void *buf, int count)$/;"	f	typeref:typename:PUBLIC int
read_register	kernel/systask.c	/^PRIVATE int read_register(char reg_addr)$/;"	f	typeref:typename:PRIVATE int
read_sector	boot/hdboot.asm	/^read_sector:$/;"	l
read_sector	boot/hdldr.asm	/^read_sector:$/;"	l
read_super_block	fs/main.c	/^PRIVATE void read_super_block(int dev)$/;"	f	typeref:typename:PRIVATE void
real_mode_disp_str	boot/hdldr.asm	/^real_mode_disp_str:$/;"	l
realclean	Makefile	/^realclean :$/;"	t
realclean	command/Makefile	/^realclean :$/;"	t
reassembly	include/sys/protect.h	/^#define	reassembly(/;"	d
regs	include/sys/proc.h	/^	struct stackframe regs;    \/* process registers saved in stack frame *\/$/;"	m	struct:proc	typeref:struct:stackframe
reset_msg	kernel/proc.c	/^PUBLIC void reset_msg(MESSAGE *p)$/;"	f	typeref:typename:PUBLIC void
restart	kernel/kernel.asm	/^restart:$/;"	l
restart_reenter	kernel/kernel.asm	/^restart_reenter:$/;"	l
retaddr	include/sys/proc.h	/^	u32	retaddr;	\/* return address for assembly code save()	│			*\/$/;"	m	struct:stackframe	typeref:typename:u32
rm	command/Makefile	/^rm : rm.o start.o $(LIB)$/;"	t
rm.o	command/Makefile	/^rm.o: rm.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
root_inode	include/sys/fs.h	/^	u32	root_inode;       \/**< Inode nr of root directory *\/$/;"	m	struct:super_block	typeref:typename:u32
root_inode	include/sys/global.h	/^EXTERN	struct inode *		root_inode;$/;"	v	typeref:struct:inode *
rw_sector	fs/main.c	/^PUBLIC int rw_sector(int io_type, int dev, u64 pos, int bytes, int proc_nr,$/;"	f	typeref:typename:PUBLIC int
s_console	include/sys/console.h	/^typedef struct s_console$/;"	s
s_tty	include/sys/tty.h	/^typedef struct s_tty$/;"	s
save	kernel/kernel.asm	/^save:$/;"	l
sb_dev	include/sys/fs.h	/^	int	sb_dev; 	\/**< the super block's home device *\/$/;"	m	struct:super_block	typeref:typename:int
schedule	kernel/proc.c	/^PUBLIC void schedule()$/;"	f	typeref:typename:PUBLIC void
scroll_lock	kernel/keyboard.c	/^PRIVATE int scroll_lock; \/* Scroll Lock		*\/$/;"	v	typeref:typename:PRIVATE int
scroll_screen	kernel/console.c	/^PUBLIC void scroll_screen(CONSOLE *con, int dir)$/;"	f	typeref:typename:PUBLIC void
search_file	fs/misc.c	/^PUBLIC int search_file(char *path)$/;"	f	typeref:typename:PUBLIC int
second	include/stdio.h	/^	u32 second;$/;"	m	struct:time	typeref:typename:u32
sect_cnt	boot/hdldr.asm	/^sect_cnt:		db	TRANS_SECT_NR	; [ 2] Number of blocks to transfer.$/;"	d
seg2linear	kernel/protect.c	/^PUBLIC u32 seg2linear(u16 seg)$/;"	f	typeref:typename:PUBLIC u32
segment_not_present	kernel/kernel.asm	/^segment_not_present:$/;"	l
select_console	kernel/console.c	/^PUBLIC void select_console(int nr_console)$/;"	f	typeref:typename:PUBLIC void
selector	include/sys/protect.h	/^	u16	selector;	\/* Selector *\/$/;"	m	struct:gate	typeref:typename:u16
send_recv	lib/misc.c	/^PUBLIC int send_recv(int function, int src_dest, MESSAGE *msg)$/;"	f	typeref:typename:PUBLIC int
sendrec	lib/syscall.asm	/^sendrec:$/;"	l
set_cursor	kernel/console.c	/^PRIVATE void set_cursor(unsigned int position)$/;"	f	typeref:typename:PRIVATE void
set_leds	kernel/keyboard.c	/^PRIVATE void set_leds()$/;"	f	typeref:typename:PRIVATE void
set_video_start_addr	kernel/console.c	/^PRIVATE void set_video_start_addr(u32 addr)$/;"	f	typeref:typename:PRIVATE void
shabby_shell	kernel/main.c	/^void shabby_shell(const char *tty_name)$/;"	f	typeref:typename:void
shift_l	kernel/keyboard.c	/^PRIVATE int shift_l; \/* l shift state	*\/$/;"	v	typeref:typename:PRIVATE int
shift_r	kernel/keyboard.c	/^PRIVATE int shift_r; \/* r shift state	*\/$/;"	v	typeref:typename:PRIVATE int
single_step_exception	kernel/kernel.asm	/^single_step_exception:$/;"	l
size	include/sys/hd.h	/^	u32	size;	\/* how many sectors in this partition *\/$/;"	m	struct:part_info	typeref:typename:u32
size	kernel/main.c	/^	char size[12]; \/* 124 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[12]	file:
source	include/type.h	/^	int source;$/;"	m	struct:__anon6e8aff300108	typeref:typename:int
spin	lib/misc.c	/^PUBLIC void spin(char *func_name)$/;"	f	typeref:typename:PUBLIC void
sprintf	lib/vsprintf.c	/^int sprintf(char *buf, const char *fmt, ...)$/;"	f	typeref:typename:int
spurious_irq	kernel/i8259.c	/^PUBLIC void spurious_irq(int irq)$/;"	f	typeref:typename:PUBLIC void
src	fs/disklog.c	/^		int src;$/;"	m	struct:dump_fd_graph::msg_src_dst	typeref:typename:int	file:
ss	include/sys/proc.h	/^	u32	ss;		\/*  ┛						┷High			*\/$/;"	m	struct:stackframe	typeref:typename:u32
ss	include/sys/protect.h	/^	u32	ss;$/;"	m	struct:tss	typeref:typename:u32
ss0	include/sys/protect.h	/^	u32	ss0;		\/*   "   segment  "  "    "        "     *\/$/;"	m	struct:tss	typeref:typename:u32
ss1	include/sys/protect.h	/^	u32	ss1;$/;"	m	struct:tss	typeref:typename:u32
ss2	include/sys/protect.h	/^	u32	ss2;$/;"	m	struct:tss	typeref:typename:u32
st_dev	include/stdio.h	/^	int st_dev;		\/* major\/minor device number *\/$/;"	m	struct:stat	typeref:typename:int
st_ino	include/stdio.h	/^	int st_ino;		\/* i-node number *\/$/;"	m	struct:stat	typeref:typename:int
st_mode	include/stdio.h	/^	int st_mode;		\/* file mode, protection bits, etc. *\/$/;"	m	struct:stat	typeref:typename:int
st_rdev	include/stdio.h	/^	int st_rdev;		\/* device ID (if special file) *\/$/;"	m	struct:stat	typeref:typename:int
st_size	include/stdio.h	/^	int st_size;		\/* file size *\/$/;"	m	struct:stat	typeref:typename:int
stack_exception	kernel/kernel.asm	/^stack_exception:$/;"	l
stackframe	include/sys/proc.h	/^struct stackframe {	\/* proc_ptr points here				↑ Low			*\/$/;"	s
stacksize	include/sys/proc.h	/^	int	stacksize;$/;"	m	struct:task	typeref:typename:int
start.o	command/Makefile	/^start.o : start.asm$/;"	t
start_cyl	include/sys/hd.h	/^	u8 start_cyl;		\/**$/;"	m	struct:part_ent	typeref:typename:u8
start_head	include/sys/hd.h	/^	u8 start_head;		\/**$/;"	m	struct:part_ent	typeref:typename:u8
start_sect	include/sys/hd.h	/^	u32 start_sect;	\/**$/;"	m	struct:part_ent	typeref:typename:u32
start_sector	include/sys/hd.h	/^	u8 start_sector;	\/**$/;"	m	struct:part_ent	typeref:typename:u8
stat	command/Makefile	/^stat : stat.o start.o $(LIB)$/;"	t
stat	include/stdio.h	/^struct stat {$/;"	s
stat	lib/stat.c	/^PUBLIC int stat(const char *path, struct stat *buf)$/;"	f	typeref:typename:PUBLIC int
stat.o	command/Makefile	/^stat.o: stat.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
str_cmp	boot/hdboot.asm	/^.str_cmp:$/;"	l
str_cmp	boot/hdldr.asm	/^.str_cmp:$/;"	l
strcat	lib/misc.c	/^PUBLIC char *strcat(char *s1, const char *s2)$/;"	f	typeref:typename:PUBLIC char *
strcmp	lib/misc.c	/^PUBLIC int strcmp(const char *s1, const char *s2)$/;"	f	typeref:typename:PUBLIC int
strcpy	lib/string.asm	/^strcpy:$/;"	l
strip_path	fs/misc.c	/^PUBLIC int strip_path(char *filename, const char *pathname,$/;"	f	typeref:typename:PUBLIC int
strlen	kernel/kliba.asm	/^.strlen		equ	$ - .glitter_str$/;"	d
strlen	lib/string.asm	/^strlen:$/;"	l
super_block	include/sys/fs.h	/^struct super_block {$/;"	s
super_block	include/sys/global.h	/^EXTERN	struct super_block	super_block[NR_SUPER_BLOCK];$/;"	v	typeref:struct:super_block[]
sync_inode	fs/main.c	/^PUBLIC void sync_inode(struct inode *p)$/;"	f	typeref:typename:PUBLIC void
sys_call	kernel/kernel.asm	/^sys_call:$/;"	l
sys_call_table	kernel/global.c	/^PUBLIC system_call sys_call_table[NR_SYS_CALL] = { sys_printx, sys_sendrec };$/;"	v	typeref:typename:PUBLIC system_call[]
sys_id	include/sys/hd.h	/^	u8 sys_id;		\/**$/;"	m	struct:part_ent	typeref:typename:u8
sys_printx	kernel/tty.c	/^PUBLIC int sys_printx(int _unused1, int _unused2, char *s, struct proc *p_proc)$/;"	f	typeref:typename:PUBLIC int
sys_sendrec	kernel/proc.c	/^PUBLIC int sys_sendrec(int function, int src_dest, MESSAGE *m, struct proc *p)$/;"	f	typeref:typename:PUBLIC int
syslog	lib/syslog.c	/^PUBLIC int syslog(const char *fmt, ...)$/;"	f	typeref:typename:PUBLIC int
system_call	include/type.h	/^typedef void*	system_call;$/;"	t	typeref:typename:void *
szMemChkTitle	boot/hdldr.asm	/^szMemChkTitle		equ	LOADER_PHY_ADDR + _szMemChkTitle$/;"	d
szMemChkTitle	boot/loader.asm	/^szMemChkTitle		equ	LOADER_PHY_ADDR + _szMemChkTitle$/;"	d
szRAMSize	boot/hdldr.asm	/^szRAMSize		equ	LOADER_PHY_ADDR + _szRAMSize$/;"	d
szRAMSize	boot/loader.asm	/^szRAMSize		equ	LOADER_PHY_ADDR + _szRAMSize$/;"	d
szReturn	boot/hdldr.asm	/^szReturn		equ	LOADER_PHY_ADDR + _szReturn$/;"	d
szReturn	boot/loader.asm	/^szReturn		equ	LOADER_PHY_ADDR + _szReturn$/;"	d
task	include/sys/proc.h	/^struct task {$/;"	s
task_f	include/type.h	/^typedef	void	(*task_f)	();$/;"	t	typeref:typename:void (*)()
task_fs	fs/main.c	/^PUBLIC void task_fs()$/;"	f	typeref:typename:PUBLIC void
task_hd	kernel/hd.c	/^PUBLIC void task_hd()$/;"	f	typeref:typename:PUBLIC void
task_mm	mm/main.c	/^PUBLIC void task_mm()$/;"	f	typeref:typename:PUBLIC void
task_stack	kernel/global.c	/^PUBLIC char task_stack[STACK_SIZE_TOTAL];$/;"	v	typeref:typename:PUBLIC char[]
task_sys	kernel/systask.c	/^PUBLIC void task_sys()$/;"	f	typeref:typename:PUBLIC void
task_table	kernel/global.c	/^PUBLIC struct task task_table[NR_TASKS] = {$/;"	v	typeref:struct:task[]
task_tty	kernel/tty.c	/^PUBLIC void task_tty()$/;"	f	typeref:typename:PUBLIC void
ticks	include/sys/global.h	/^EXTERN	int	ticks;$/;"	v	typeref:typename:EXTERN int
ticks	include/sys/proc.h	/^        int ticks;                 \/* remained ticks *\/$/;"	m	struct:proc	typeref:typename:int
time	include/stdio.h	/^struct time {$/;"	s
times	boot/boot.asm	/^times 	510-($-$$)	db	0	; 填充剩下的空间，使生成的二进制代码恰好为512字节$/;"	l
times	boot/hdboot.asm	/^times 	510-($-$$) db 0 ; 填充剩下的空间，使生成的二进制代码恰好为512字节$/;"	l
touch	command/Makefile	/^touch : touch.o start.o $(LIB)$/;"	t
touch.o	command/Makefile	/^touch.o: touch.c ..\/include\/type.h ..\/include\/stdio.h$/;"	t
trap	include/sys/protect.h	/^	u16	trap;$/;"	m	struct:tss	typeref:typename:u16
tss	include/sys/global.h	/^EXTERN	struct tss	tss;$/;"	v	typeref:struct:tss
tss	include/sys/protect.h	/^struct tss {$/;"	s
tty_caller	include/sys/tty.h	/^	int	tty_caller;$/;"	m	struct:s_tty	typeref:typename:int
tty_dev_read	kernel/tty.c	/^PRIVATE void tty_dev_read(TTY *tty)$/;"	f	typeref:typename:PRIVATE void
tty_dev_write	kernel/tty.c	/^PRIVATE void tty_dev_write(TTY *tty)$/;"	f	typeref:typename:PRIVATE void
tty_do_read	kernel/tty.c	/^PRIVATE void tty_do_read(TTY *tty, MESSAGE *msg)$/;"	f	typeref:typename:PRIVATE void
tty_do_write	kernel/tty.c	/^PRIVATE void tty_do_write(TTY *tty, MESSAGE *msg)$/;"	f	typeref:typename:PRIVATE void
tty_left_cnt	include/sys/tty.h	/^	int	tty_left_cnt;$/;"	m	struct:s_tty	typeref:typename:int
tty_procnr	include/sys/tty.h	/^	int	tty_procnr;$/;"	m	struct:s_tty	typeref:typename:int
tty_req_buf	include/sys/tty.h	/^	void*	tty_req_buf;$/;"	m	struct:s_tty	typeref:typename:void *
tty_table	kernel/global.c	/^PUBLIC TTY tty_table[NR_CONSOLES];$/;"	v	typeref:typename:PUBLIC TTY[]
tty_trans_cnt	include/sys/tty.h	/^	int	tty_trans_cnt;$/;"	m	struct:s_tty	typeref:typename:int
type	include/type.h	/^	int type;$/;"	m	struct:__anon6e8aff300108	typeref:typename:int
typeflag	kernel/main.c	/^	char typeflag; \/* 156 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char	file:
u	include/type.h	/^	} u;$/;"	m	struct:__anon6e8aff300108	typeref:union:__anon6e8aff300108::__anon6e8aff30020a
u16	include/type.h	/^typedef	unsigned short		u16;$/;"	t	typeref:typename:unsigned short
u32	include/type.h	/^typedef	unsigned int		u32;$/;"	t	typeref:typename:unsigned int
u64	include/type.h	/^typedef	unsigned long long	u64;$/;"	t	typeref:typename:unsigned long long
u8	include/type.h	/^typedef	unsigned char		u8;$/;"	t	typeref:typename:unsigned char
uid	kernel/main.c	/^	char uid[8]; \/* 108 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[8]	file:
uname	kernel/main.c	/^	char uname[32]; \/* 265 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[32]	file:
unblock	kernel/proc.c	/^PRIVATE void unblock(struct proc *p)$/;"	f	typeref:typename:PRIVATE void
unlink	lib/unlink.c	/^PUBLIC int unlink(const char *pathname)$/;"	f	typeref:typename:PUBLIC int
untar	kernel/main.c	/^void untar(const char *filename)$/;"	f	typeref:typename:void
user_proc_table	kernel/global.c	/^PUBLIC struct task user_proc_table[NR_NATIVE_PROCS] = {$/;"	v	typeref:struct:task[]
va2la	kernel/proc.c	/^PUBLIC void *va2la(int pid, void *va)$/;"	f	typeref:typename:PUBLIC void *
va_list	include/type.h	/^typedef	char *			va_list;$/;"	t	typeref:typename:char *
version	kernel/main.c	/^	char version[2]; \/* 263 *\/$/;"	m	struct:posix_tar_header	typeref:typename:char[2]	file:
vsprintf	lib/vsprintf.c	/^PUBLIC int vsprintf(char *buf, const char *fmt, va_list args)$/;"	f	typeref:typename:PUBLIC int
wRootDirSizeForLoop	boot/boot.asm	/^wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数, 在循环中会递减/;"	d
wRootDirSizeForLoop	boot/loader.asm	/^wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数$/;"	d
wSectorNo	boot/boot.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
wSectorNo	boot/hdldr.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
wSectorNo	boot/loader.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
w_copy	kernel/console.c	/^PRIVATE void w_copy(unsigned int dst, const unsigned int src, int size)$/;"	f	typeref:typename:PRIVATE void
wait	lib/wait.c	/^PUBLIC int wait(int *status)$/;"	f	typeref:typename:PUBLIC int
waitfor	kernel/hd.c	/^PRIVATE int waitfor(int mask, int val, int timeout)$/;"	f	typeref:typename:PRIVATE int
write	lib/write.c	/^PUBLIC int write(int fd, const void *buf, int count)$/;"	f	typeref:typename:PUBLIC int
write_buf	command/edit.c	/^void write_buf(int pos)$/;"	f	typeref:typename:void
writeback	command/edit.c	/^void writeback(char *pathname)$/;"	f	typeref:typename:void
xor	boot/boot.asm	/^	xor	dl, dl	; ┣ 软驱复位$/;"	d
xor	boot/boot.asm	/^	xor	dx, dx			; 现在 ax 中是 FATEntry 在 FAT 中的偏移量. 下面来计算 FATEntry 在哪/;"	d
xor	boot/loader.asm	/^	xor	dl, dl	; ┣ 软驱复位$/;"	d
xor	boot/loader.asm	/^	xor	dx, dx			; 现在 ax 中是 FATEntry 在 FAT 中的偏移量. 下面来计算 FATEntry 在哪/;"	d
year	include/stdio.h	/^	u32 year;$/;"	m	struct:time	typeref:typename:u32
